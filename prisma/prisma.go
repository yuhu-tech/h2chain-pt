// Code generated by Prisma CLI (https://github.com/prisma/prisma). DO NOT EDIT.

package prisma

import (
	"context"
	"errors"

	"github.com/prisma/prisma-client-lib-go"

	"github.com/machinebox/graphql"
)

var ErrNoResult = errors.New("query returned no result")

func Str(v string) *string { return &v }
func Int32(v int32) *int32 { return &v }
func Bool(v bool) *bool    { return &v }

type BatchPayloadExec struct {
	exec *prisma.BatchPayloadExec
}

func (exec *BatchPayloadExec) Exec(ctx context.Context) (BatchPayload, error) {
	bp, err := exec.exec.Exec(ctx)
	return BatchPayload(bp), err
}

type BatchPayload struct {
	Count int64 `json:"count"`
}

type Aggregate struct {
	Count int64 `json:"count"`
}

type Client struct {
	Client *prisma.Client
}

type Options struct {
	Endpoint string
	Secret   string
}

func New(options *Options, opts ...graphql.ClientOption) *Client {
	endpoint := DefaultEndpoint
	secret := Secret
	if options != nil {
		endpoint = options.Endpoint
		secret = options.Secret
	}
	return &Client{
		Client: prisma.New(endpoint, secret, opts...),
	}
}

func (client *Client) GraphQL(ctx context.Context, query string, variables map[string]interface{}) (map[string]interface{}, error) {
	return client.Client.GraphQL(ctx, query, variables)
}

var DefaultEndpoint = "http://localhost:8866"
var Secret = ""

func (client *Client) OrderAdviserModify(params OrderAdviserModifyWhereUniqueInput) *OrderAdviserModifyExec {
	ret := client.Client.GetOne(
		nil,
		params,
		[2]string{"OrderAdviserModifyWhereUniqueInput!", "OrderAdviserModify"},
		"orderAdviserModify",
		[]string{"id", "revision", "timeStamp", "isFloat", "hourlySalary", "workCount", "attention"})

	return &OrderAdviserModifyExec{ret}
}

type OrderAdviserModifiesParams struct {
	Where   *OrderAdviserModifyWhereInput   `json:"where,omitempty"`
	OrderBy *OrderAdviserModifyOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32                          `json:"skip,omitempty"`
	After   *string                         `json:"after,omitempty"`
	Before  *string                         `json:"before,omitempty"`
	First   *int32                          `json:"first,omitempty"`
	Last    *int32                          `json:"last,omitempty"`
}

func (client *Client) OrderAdviserModifies(params *OrderAdviserModifiesParams) *OrderAdviserModifyExecArray {
	var wparams *prisma.WhereParams
	if params != nil {
		wparams = &prisma.WhereParams{
			Where:   params.Where,
			OrderBy: (*string)(params.OrderBy),
			Skip:    params.Skip,
			After:   params.After,
			Before:  params.Before,
			First:   params.First,
			Last:    params.Last,
		}
	}

	ret := client.Client.GetMany(
		nil,
		wparams,
		[3]string{"OrderAdviserModifyWhereInput", "OrderAdviserModifyOrderByInput", "OrderAdviserModify"},
		"orderAdviserModifies",
		[]string{"id", "revision", "timeStamp", "isFloat", "hourlySalary", "workCount", "attention"})

	return &OrderAdviserModifyExecArray{ret}
}

type OrderAdviserModifiesConnectionParams struct {
	Where   *OrderAdviserModifyWhereInput   `json:"where,omitempty"`
	OrderBy *OrderAdviserModifyOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32                          `json:"skip,omitempty"`
	After   *string                         `json:"after,omitempty"`
	Before  *string                         `json:"before,omitempty"`
	First   *int32                          `json:"first,omitempty"`
	Last    *int32                          `json:"last,omitempty"`
}

func (client *Client) OrderAdviserModifiesConnection(params *OrderAdviserModifiesConnectionParams) OrderAdviserModifyConnectionExec {
	panic("not implemented")
}

func (client *Client) OrderAgent(params OrderAgentWhereUniqueInput) *OrderAgentExec {
	ret := client.Client.GetOne(
		nil,
		params,
		[2]string{"OrderAgentWhereUniqueInput!", "OrderAgent"},
		"orderAgent",
		[]string{"id", "orderId", "agentId"})

	return &OrderAgentExec{ret}
}

type OrderAgentsParams struct {
	Where   *OrderAgentWhereInput   `json:"where,omitempty"`
	OrderBy *OrderAgentOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32                  `json:"skip,omitempty"`
	After   *string                 `json:"after,omitempty"`
	Before  *string                 `json:"before,omitempty"`
	First   *int32                  `json:"first,omitempty"`
	Last    *int32                  `json:"last,omitempty"`
}

func (client *Client) OrderAgents(params *OrderAgentsParams) *OrderAgentExecArray {
	var wparams *prisma.WhereParams
	if params != nil {
		wparams = &prisma.WhereParams{
			Where:   params.Where,
			OrderBy: (*string)(params.OrderBy),
			Skip:    params.Skip,
			After:   params.After,
			Before:  params.Before,
			First:   params.First,
			Last:    params.Last,
		}
	}

	ret := client.Client.GetMany(
		nil,
		wparams,
		[3]string{"OrderAgentWhereInput", "OrderAgentOrderByInput", "OrderAgent"},
		"orderAgents",
		[]string{"id", "orderId", "agentId"})

	return &OrderAgentExecArray{ret}
}

type OrderAgentsConnectionParams struct {
	Where   *OrderAgentWhereInput   `json:"where,omitempty"`
	OrderBy *OrderAgentOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32                  `json:"skip,omitempty"`
	After   *string                 `json:"after,omitempty"`
	Before  *string                 `json:"before,omitempty"`
	First   *int32                  `json:"first,omitempty"`
	Last    *int32                  `json:"last,omitempty"`
}

func (client *Client) OrderAgentsConnection(params *OrderAgentsConnectionParams) OrderAgentConnectionExec {
	panic("not implemented")
}

func (client *Client) OrderCandidate(params OrderCandidateWhereUniqueInput) *OrderCandidateExec {
	ret := client.Client.GetOne(
		nil,
		params,
		[2]string{"OrderCandidateWhereUniqueInput!", "OrderCandidate"},
		"orderCandidate",
		[]string{"id", "adviserId", "agentId", "ptId", "applyTime", "signInTime", "ptStatus", "ptPerformance", "objectReason"})

	return &OrderCandidateExec{ret}
}

type OrderCandidatesParams struct {
	Where   *OrderCandidateWhereInput   `json:"where,omitempty"`
	OrderBy *OrderCandidateOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32                      `json:"skip,omitempty"`
	After   *string                     `json:"after,omitempty"`
	Before  *string                     `json:"before,omitempty"`
	First   *int32                      `json:"first,omitempty"`
	Last    *int32                      `json:"last,omitempty"`
}

func (client *Client) OrderCandidates(params *OrderCandidatesParams) *OrderCandidateExecArray {
	var wparams *prisma.WhereParams
	if params != nil {
		wparams = &prisma.WhereParams{
			Where:   params.Where,
			OrderBy: (*string)(params.OrderBy),
			Skip:    params.Skip,
			After:   params.After,
			Before:  params.Before,
			First:   params.First,
			Last:    params.Last,
		}
	}

	ret := client.Client.GetMany(
		nil,
		wparams,
		[3]string{"OrderCandidateWhereInput", "OrderCandidateOrderByInput", "OrderCandidate"},
		"orderCandidates",
		[]string{"id", "adviserId", "agentId", "ptId", "applyTime", "signInTime", "ptStatus", "ptPerformance", "objectReason"})

	return &OrderCandidateExecArray{ret}
}

type OrderCandidatesConnectionParams struct {
	Where   *OrderCandidateWhereInput   `json:"where,omitempty"`
	OrderBy *OrderCandidateOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32                      `json:"skip,omitempty"`
	After   *string                     `json:"after,omitempty"`
	Before  *string                     `json:"before,omitempty"`
	First   *int32                      `json:"first,omitempty"`
	Last    *int32                      `json:"last,omitempty"`
}

func (client *Client) OrderCandidatesConnection(params *OrderCandidatesConnectionParams) OrderCandidateConnectionExec {
	panic("not implemented")
}

func (client *Client) OrderHotelModify(params OrderHotelModifyWhereUniqueInput) *OrderHotelModifyExec {
	ret := client.Client.GetOne(
		nil,
		params,
		[2]string{"OrderHotelModifyWhereUniqueInput!", "OrderHotelModify"},
		"orderHotelModify",
		[]string{"id", "revision", "timestamp", "count", "countMale", "dateTime", "duration", "mode"})

	return &OrderHotelModifyExec{ret}
}

type OrderHotelModifiesParams struct {
	Where   *OrderHotelModifyWhereInput   `json:"where,omitempty"`
	OrderBy *OrderHotelModifyOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32                        `json:"skip,omitempty"`
	After   *string                       `json:"after,omitempty"`
	Before  *string                       `json:"before,omitempty"`
	First   *int32                        `json:"first,omitempty"`
	Last    *int32                        `json:"last,omitempty"`
}

func (client *Client) OrderHotelModifies(params *OrderHotelModifiesParams) *OrderHotelModifyExecArray {
	var wparams *prisma.WhereParams
	if params != nil {
		wparams = &prisma.WhereParams{
			Where:   params.Where,
			OrderBy: (*string)(params.OrderBy),
			Skip:    params.Skip,
			After:   params.After,
			Before:  params.Before,
			First:   params.First,
			Last:    params.Last,
		}
	}

	ret := client.Client.GetMany(
		nil,
		wparams,
		[3]string{"OrderHotelModifyWhereInput", "OrderHotelModifyOrderByInput", "OrderHotelModify"},
		"orderHotelModifies",
		[]string{"id", "revision", "timestamp", "count", "countMale", "dateTime", "duration", "mode"})

	return &OrderHotelModifyExecArray{ret}
}

type OrderHotelModifiesConnectionParams struct {
	Where   *OrderHotelModifyWhereInput   `json:"where,omitempty"`
	OrderBy *OrderHotelModifyOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32                        `json:"skip,omitempty"`
	After   *string                       `json:"after,omitempty"`
	Before  *string                       `json:"before,omitempty"`
	First   *int32                        `json:"first,omitempty"`
	Last    *int32                        `json:"last,omitempty"`
}

func (client *Client) OrderHotelModifiesConnection(params *OrderHotelModifiesConnectionParams) OrderHotelModifyConnectionExec {
	panic("not implemented")
}

func (client *Client) OrderOrigin(params OrderOriginWhereUniqueInput) *OrderOriginExec {
	ret := client.Client.GetOne(
		nil,
		params,
		[2]string{"OrderOriginWhereUniqueInput!", "OrderOrigin"},
		"orderOrigin",
		[]string{"id", "hotelId", "hrId", "adviserId", "datetime", "duration", "job", "mode", "count", "countMale", "status"})

	return &OrderOriginExec{ret}
}

type OrderOriginsParams struct {
	Where   *OrderOriginWhereInput   `json:"where,omitempty"`
	OrderBy *OrderOriginOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32                   `json:"skip,omitempty"`
	After   *string                  `json:"after,omitempty"`
	Before  *string                  `json:"before,omitempty"`
	First   *int32                   `json:"first,omitempty"`
	Last    *int32                   `json:"last,omitempty"`
}

func (client *Client) OrderOrigins(params *OrderOriginsParams) *OrderOriginExecArray {
	var wparams *prisma.WhereParams
	if params != nil {
		wparams = &prisma.WhereParams{
			Where:   params.Where,
			OrderBy: (*string)(params.OrderBy),
			Skip:    params.Skip,
			After:   params.After,
			Before:  params.Before,
			First:   params.First,
			Last:    params.Last,
		}
	}

	ret := client.Client.GetMany(
		nil,
		wparams,
		[3]string{"OrderOriginWhereInput", "OrderOriginOrderByInput", "OrderOrigin"},
		"orderOrigins",
		[]string{"id", "hotelId", "hrId", "adviserId", "datetime", "duration", "job", "mode", "count", "countMale", "status"})

	return &OrderOriginExecArray{ret}
}

type OrderOriginsConnectionParams struct {
	Where   *OrderOriginWhereInput   `json:"where,omitempty"`
	OrderBy *OrderOriginOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32                   `json:"skip,omitempty"`
	After   *string                  `json:"after,omitempty"`
	Before  *string                  `json:"before,omitempty"`
	First   *int32                   `json:"first,omitempty"`
	Last    *int32                   `json:"last,omitempty"`
}

func (client *Client) OrderOriginsConnection(params *OrderOriginsConnectionParams) OrderOriginConnectionExec {
	panic("not implemented")
}

func (client *Client) RegistrationChannel(params RegistrationChannelWhereUniqueInput) *RegistrationChannelExec {
	ret := client.Client.GetOne(
		nil,
		params,
		[2]string{"RegistrationChannelWhereUniqueInput!", "RegistrationChannel"},
		"registrationChannel",
		[]string{"id", "orderId", "type", "inviterId"})

	return &RegistrationChannelExec{ret}
}

type RegistrationChannelsParams struct {
	Where   *RegistrationChannelWhereInput   `json:"where,omitempty"`
	OrderBy *RegistrationChannelOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32                           `json:"skip,omitempty"`
	After   *string                          `json:"after,omitempty"`
	Before  *string                          `json:"before,omitempty"`
	First   *int32                           `json:"first,omitempty"`
	Last    *int32                           `json:"last,omitempty"`
}

func (client *Client) RegistrationChannels(params *RegistrationChannelsParams) *RegistrationChannelExecArray {
	var wparams *prisma.WhereParams
	if params != nil {
		wparams = &prisma.WhereParams{
			Where:   params.Where,
			OrderBy: (*string)(params.OrderBy),
			Skip:    params.Skip,
			After:   params.After,
			Before:  params.Before,
			First:   params.First,
			Last:    params.Last,
		}
	}

	ret := client.Client.GetMany(
		nil,
		wparams,
		[3]string{"RegistrationChannelWhereInput", "RegistrationChannelOrderByInput", "RegistrationChannel"},
		"registrationChannels",
		[]string{"id", "orderId", "type", "inviterId"})

	return &RegistrationChannelExecArray{ret}
}

type RegistrationChannelsConnectionParams struct {
	Where   *RegistrationChannelWhereInput   `json:"where,omitempty"`
	OrderBy *RegistrationChannelOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32                           `json:"skip,omitempty"`
	After   *string                          `json:"after,omitempty"`
	Before  *string                          `json:"before,omitempty"`
	First   *int32                           `json:"first,omitempty"`
	Last    *int32                           `json:"last,omitempty"`
}

func (client *Client) RegistrationChannelsConnection(params *RegistrationChannelsConnectionParams) RegistrationChannelConnectionExec {
	panic("not implemented")
}

func (client *Client) Remark(params RemarkWhereUniqueInput) *RemarkExec {
	ret := client.Client.GetOne(
		nil,
		params,
		[2]string{"RemarkWhereUniqueInput!", "Remark"},
		"remark",
		[]string{"id", "ptId", "startDate", "endDate", "realSalary", "isWorked"})

	return &RemarkExec{ret}
}

type RemarksParams struct {
	Where   *RemarkWhereInput   `json:"where,omitempty"`
	OrderBy *RemarkOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32              `json:"skip,omitempty"`
	After   *string             `json:"after,omitempty"`
	Before  *string             `json:"before,omitempty"`
	First   *int32              `json:"first,omitempty"`
	Last    *int32              `json:"last,omitempty"`
}

func (client *Client) Remarks(params *RemarksParams) *RemarkExecArray {
	var wparams *prisma.WhereParams
	if params != nil {
		wparams = &prisma.WhereParams{
			Where:   params.Where,
			OrderBy: (*string)(params.OrderBy),
			Skip:    params.Skip,
			After:   params.After,
			Before:  params.Before,
			First:   params.First,
			Last:    params.Last,
		}
	}

	ret := client.Client.GetMany(
		nil,
		wparams,
		[3]string{"RemarkWhereInput", "RemarkOrderByInput", "Remark"},
		"remarks",
		[]string{"id", "ptId", "startDate", "endDate", "realSalary", "isWorked"})

	return &RemarkExecArray{ret}
}

type RemarksConnectionParams struct {
	Where   *RemarkWhereInput   `json:"where,omitempty"`
	OrderBy *RemarkOrderByInput `json:"orderBy,omitempty"`
	Skip    *int32              `json:"skip,omitempty"`
	After   *string             `json:"after,omitempty"`
	Before  *string             `json:"before,omitempty"`
	First   *int32              `json:"first,omitempty"`
	Last    *int32              `json:"last,omitempty"`
}

func (client *Client) RemarksConnection(params *RemarksConnectionParams) RemarkConnectionExec {
	panic("not implemented")
}

func (client *Client) CreateOrderAdviserModify(params OrderAdviserModifyCreateInput) *OrderAdviserModifyExec {
	ret := client.Client.Create(
		params,
		[2]string{"OrderAdviserModifyCreateInput!", "OrderAdviserModify"},
		"createOrderAdviserModify",
		[]string{"id", "revision", "timeStamp", "isFloat", "hourlySalary", "workCount", "attention"})

	return &OrderAdviserModifyExec{ret}
}

type OrderAdviserModifyUpdateParams struct {
	Data  OrderAdviserModifyUpdateInput      `json:"data"`
	Where OrderAdviserModifyWhereUniqueInput `json:"where"`
}

func (client *Client) UpdateOrderAdviserModify(params OrderAdviserModifyUpdateParams) *OrderAdviserModifyExec {
	ret := client.Client.Update(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[3]string{"OrderAdviserModifyUpdateInput!", "OrderAdviserModifyWhereUniqueInput!", "OrderAdviserModify"},
		"updateOrderAdviserModify",
		[]string{"id", "revision", "timeStamp", "isFloat", "hourlySalary", "workCount", "attention"})

	return &OrderAdviserModifyExec{ret}
}

type OrderAdviserModifyUpdateManyParams struct {
	Data  OrderAdviserModifyUpdateManyMutationInput `json:"data"`
	Where *OrderAdviserModifyWhereInput             `json:"where,omitempty"`
}

func (client *Client) UpdateManyOrderAdviserModifies(params OrderAdviserModifyUpdateManyParams) *BatchPayloadExec {
	exec := client.Client.UpdateMany(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[2]string{"OrderAdviserModifyUpdateManyMutationInput!", "OrderAdviserModifyWhereInput"},
		"updateManyOrderAdviserModifies")
	return &BatchPayloadExec{exec}
}

type OrderAdviserModifyUpsertParams struct {
	Where  OrderAdviserModifyWhereUniqueInput `json:"where"`
	Create OrderAdviserModifyCreateInput      `json:"create"`
	Update OrderAdviserModifyUpdateInput      `json:"update"`
}

func (client *Client) UpsertOrderAdviserModify(params OrderAdviserModifyUpsertParams) *OrderAdviserModifyExec {
	uparams := &prisma.UpsertParams{
		Where:  params.Where,
		Create: params.Create,
		Update: params.Update,
	}
	ret := client.Client.Upsert(
		uparams,
		[4]string{"OrderAdviserModifyWhereUniqueInput!", "OrderAdviserModifyCreateInput!", "OrderAdviserModifyUpdateInput!", "OrderAdviserModify"},
		"upsertOrderAdviserModify",
		[]string{"id", "revision", "timeStamp", "isFloat", "hourlySalary", "workCount", "attention"})

	return &OrderAdviserModifyExec{ret}
}

func (client *Client) DeleteOrderAdviserModify(params OrderAdviserModifyWhereUniqueInput) *OrderAdviserModifyExec {
	ret := client.Client.Delete(
		params,
		[2]string{"OrderAdviserModifyWhereUniqueInput!", "OrderAdviserModify"},
		"deleteOrderAdviserModify",
		[]string{"id", "revision", "timeStamp", "isFloat", "hourlySalary", "workCount", "attention"})

	return &OrderAdviserModifyExec{ret}
}

func (client *Client) DeleteManyOrderAdviserModifies(params *OrderAdviserModifyWhereInput) *BatchPayloadExec {
	exec := client.Client.DeleteMany(params, "OrderAdviserModifyWhereInput", "deleteManyOrderAdviserModifies")
	return &BatchPayloadExec{exec}
}

func (client *Client) CreateOrderAgent(params OrderAgentCreateInput) *OrderAgentExec {
	ret := client.Client.Create(
		params,
		[2]string{"OrderAgentCreateInput!", "OrderAgent"},
		"createOrderAgent",
		[]string{"id", "orderId", "agentId"})

	return &OrderAgentExec{ret}
}

type OrderAgentUpdateParams struct {
	Data  OrderAgentUpdateInput      `json:"data"`
	Where OrderAgentWhereUniqueInput `json:"where"`
}

func (client *Client) UpdateOrderAgent(params OrderAgentUpdateParams) *OrderAgentExec {
	ret := client.Client.Update(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[3]string{"OrderAgentUpdateInput!", "OrderAgentWhereUniqueInput!", "OrderAgent"},
		"updateOrderAgent",
		[]string{"id", "orderId", "agentId"})

	return &OrderAgentExec{ret}
}

type OrderAgentUpdateManyParams struct {
	Data  OrderAgentUpdateManyMutationInput `json:"data"`
	Where *OrderAgentWhereInput             `json:"where,omitempty"`
}

func (client *Client) UpdateManyOrderAgents(params OrderAgentUpdateManyParams) *BatchPayloadExec {
	exec := client.Client.UpdateMany(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[2]string{"OrderAgentUpdateManyMutationInput!", "OrderAgentWhereInput"},
		"updateManyOrderAgents")
	return &BatchPayloadExec{exec}
}

type OrderAgentUpsertParams struct {
	Where  OrderAgentWhereUniqueInput `json:"where"`
	Create OrderAgentCreateInput      `json:"create"`
	Update OrderAgentUpdateInput      `json:"update"`
}

func (client *Client) UpsertOrderAgent(params OrderAgentUpsertParams) *OrderAgentExec {
	uparams := &prisma.UpsertParams{
		Where:  params.Where,
		Create: params.Create,
		Update: params.Update,
	}
	ret := client.Client.Upsert(
		uparams,
		[4]string{"OrderAgentWhereUniqueInput!", "OrderAgentCreateInput!", "OrderAgentUpdateInput!", "OrderAgent"},
		"upsertOrderAgent",
		[]string{"id", "orderId", "agentId"})

	return &OrderAgentExec{ret}
}

func (client *Client) DeleteOrderAgent(params OrderAgentWhereUniqueInput) *OrderAgentExec {
	ret := client.Client.Delete(
		params,
		[2]string{"OrderAgentWhereUniqueInput!", "OrderAgent"},
		"deleteOrderAgent",
		[]string{"id", "orderId", "agentId"})

	return &OrderAgentExec{ret}
}

func (client *Client) DeleteManyOrderAgents(params *OrderAgentWhereInput) *BatchPayloadExec {
	exec := client.Client.DeleteMany(params, "OrderAgentWhereInput", "deleteManyOrderAgents")
	return &BatchPayloadExec{exec}
}

func (client *Client) CreateOrderCandidate(params OrderCandidateCreateInput) *OrderCandidateExec {
	ret := client.Client.Create(
		params,
		[2]string{"OrderCandidateCreateInput!", "OrderCandidate"},
		"createOrderCandidate",
		[]string{"id", "adviserId", "agentId", "ptId", "applyTime", "signInTime", "ptStatus", "ptPerformance", "objectReason"})

	return &OrderCandidateExec{ret}
}

type OrderCandidateUpdateParams struct {
	Data  OrderCandidateUpdateInput      `json:"data"`
	Where OrderCandidateWhereUniqueInput `json:"where"`
}

func (client *Client) UpdateOrderCandidate(params OrderCandidateUpdateParams) *OrderCandidateExec {
	ret := client.Client.Update(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[3]string{"OrderCandidateUpdateInput!", "OrderCandidateWhereUniqueInput!", "OrderCandidate"},
		"updateOrderCandidate",
		[]string{"id", "adviserId", "agentId", "ptId", "applyTime", "signInTime", "ptStatus", "ptPerformance", "objectReason"})

	return &OrderCandidateExec{ret}
}

type OrderCandidateUpdateManyParams struct {
	Data  OrderCandidateUpdateManyMutationInput `json:"data"`
	Where *OrderCandidateWhereInput             `json:"where,omitempty"`
}

func (client *Client) UpdateManyOrderCandidates(params OrderCandidateUpdateManyParams) *BatchPayloadExec {
	exec := client.Client.UpdateMany(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[2]string{"OrderCandidateUpdateManyMutationInput!", "OrderCandidateWhereInput"},
		"updateManyOrderCandidates")
	return &BatchPayloadExec{exec}
}

type OrderCandidateUpsertParams struct {
	Where  OrderCandidateWhereUniqueInput `json:"where"`
	Create OrderCandidateCreateInput      `json:"create"`
	Update OrderCandidateUpdateInput      `json:"update"`
}

func (client *Client) UpsertOrderCandidate(params OrderCandidateUpsertParams) *OrderCandidateExec {
	uparams := &prisma.UpsertParams{
		Where:  params.Where,
		Create: params.Create,
		Update: params.Update,
	}
	ret := client.Client.Upsert(
		uparams,
		[4]string{"OrderCandidateWhereUniqueInput!", "OrderCandidateCreateInput!", "OrderCandidateUpdateInput!", "OrderCandidate"},
		"upsertOrderCandidate",
		[]string{"id", "adviserId", "agentId", "ptId", "applyTime", "signInTime", "ptStatus", "ptPerformance", "objectReason"})

	return &OrderCandidateExec{ret}
}

func (client *Client) DeleteOrderCandidate(params OrderCandidateWhereUniqueInput) *OrderCandidateExec {
	ret := client.Client.Delete(
		params,
		[2]string{"OrderCandidateWhereUniqueInput!", "OrderCandidate"},
		"deleteOrderCandidate",
		[]string{"id", "adviserId", "agentId", "ptId", "applyTime", "signInTime", "ptStatus", "ptPerformance", "objectReason"})

	return &OrderCandidateExec{ret}
}

func (client *Client) DeleteManyOrderCandidates(params *OrderCandidateWhereInput) *BatchPayloadExec {
	exec := client.Client.DeleteMany(params, "OrderCandidateWhereInput", "deleteManyOrderCandidates")
	return &BatchPayloadExec{exec}
}

func (client *Client) CreateOrderHotelModify(params OrderHotelModifyCreateInput) *OrderHotelModifyExec {
	ret := client.Client.Create(
		params,
		[2]string{"OrderHotelModifyCreateInput!", "OrderHotelModify"},
		"createOrderHotelModify",
		[]string{"id", "revision", "timestamp", "count", "countMale", "dateTime", "duration", "mode"})

	return &OrderHotelModifyExec{ret}
}

type OrderHotelModifyUpdateParams struct {
	Data  OrderHotelModifyUpdateInput      `json:"data"`
	Where OrderHotelModifyWhereUniqueInput `json:"where"`
}

func (client *Client) UpdateOrderHotelModify(params OrderHotelModifyUpdateParams) *OrderHotelModifyExec {
	ret := client.Client.Update(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[3]string{"OrderHotelModifyUpdateInput!", "OrderHotelModifyWhereUniqueInput!", "OrderHotelModify"},
		"updateOrderHotelModify",
		[]string{"id", "revision", "timestamp", "count", "countMale", "dateTime", "duration", "mode"})

	return &OrderHotelModifyExec{ret}
}

type OrderHotelModifyUpdateManyParams struct {
	Data  OrderHotelModifyUpdateManyMutationInput `json:"data"`
	Where *OrderHotelModifyWhereInput             `json:"where,omitempty"`
}

func (client *Client) UpdateManyOrderHotelModifies(params OrderHotelModifyUpdateManyParams) *BatchPayloadExec {
	exec := client.Client.UpdateMany(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[2]string{"OrderHotelModifyUpdateManyMutationInput!", "OrderHotelModifyWhereInput"},
		"updateManyOrderHotelModifies")
	return &BatchPayloadExec{exec}
}

type OrderHotelModifyUpsertParams struct {
	Where  OrderHotelModifyWhereUniqueInput `json:"where"`
	Create OrderHotelModifyCreateInput      `json:"create"`
	Update OrderHotelModifyUpdateInput      `json:"update"`
}

func (client *Client) UpsertOrderHotelModify(params OrderHotelModifyUpsertParams) *OrderHotelModifyExec {
	uparams := &prisma.UpsertParams{
		Where:  params.Where,
		Create: params.Create,
		Update: params.Update,
	}
	ret := client.Client.Upsert(
		uparams,
		[4]string{"OrderHotelModifyWhereUniqueInput!", "OrderHotelModifyCreateInput!", "OrderHotelModifyUpdateInput!", "OrderHotelModify"},
		"upsertOrderHotelModify",
		[]string{"id", "revision", "timestamp", "count", "countMale", "dateTime", "duration", "mode"})

	return &OrderHotelModifyExec{ret}
}

func (client *Client) DeleteOrderHotelModify(params OrderHotelModifyWhereUniqueInput) *OrderHotelModifyExec {
	ret := client.Client.Delete(
		params,
		[2]string{"OrderHotelModifyWhereUniqueInput!", "OrderHotelModify"},
		"deleteOrderHotelModify",
		[]string{"id", "revision", "timestamp", "count", "countMale", "dateTime", "duration", "mode"})

	return &OrderHotelModifyExec{ret}
}

func (client *Client) DeleteManyOrderHotelModifies(params *OrderHotelModifyWhereInput) *BatchPayloadExec {
	exec := client.Client.DeleteMany(params, "OrderHotelModifyWhereInput", "deleteManyOrderHotelModifies")
	return &BatchPayloadExec{exec}
}

func (client *Client) CreateOrderOrigin(params OrderOriginCreateInput) *OrderOriginExec {
	ret := client.Client.Create(
		params,
		[2]string{"OrderOriginCreateInput!", "OrderOrigin"},
		"createOrderOrigin",
		[]string{"id", "hotelId", "hrId", "adviserId", "datetime", "duration", "job", "mode", "count", "countMale", "status"})

	return &OrderOriginExec{ret}
}

type OrderOriginUpdateParams struct {
	Data  OrderOriginUpdateInput      `json:"data"`
	Where OrderOriginWhereUniqueInput `json:"where"`
}

func (client *Client) UpdateOrderOrigin(params OrderOriginUpdateParams) *OrderOriginExec {
	ret := client.Client.Update(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[3]string{"OrderOriginUpdateInput!", "OrderOriginWhereUniqueInput!", "OrderOrigin"},
		"updateOrderOrigin",
		[]string{"id", "hotelId", "hrId", "adviserId", "datetime", "duration", "job", "mode", "count", "countMale", "status"})

	return &OrderOriginExec{ret}
}

type OrderOriginUpdateManyParams struct {
	Data  OrderOriginUpdateManyMutationInput `json:"data"`
	Where *OrderOriginWhereInput             `json:"where,omitempty"`
}

func (client *Client) UpdateManyOrderOrigins(params OrderOriginUpdateManyParams) *BatchPayloadExec {
	exec := client.Client.UpdateMany(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[2]string{"OrderOriginUpdateManyMutationInput!", "OrderOriginWhereInput"},
		"updateManyOrderOrigins")
	return &BatchPayloadExec{exec}
}

type OrderOriginUpsertParams struct {
	Where  OrderOriginWhereUniqueInput `json:"where"`
	Create OrderOriginCreateInput      `json:"create"`
	Update OrderOriginUpdateInput      `json:"update"`
}

func (client *Client) UpsertOrderOrigin(params OrderOriginUpsertParams) *OrderOriginExec {
	uparams := &prisma.UpsertParams{
		Where:  params.Where,
		Create: params.Create,
		Update: params.Update,
	}
	ret := client.Client.Upsert(
		uparams,
		[4]string{"OrderOriginWhereUniqueInput!", "OrderOriginCreateInput!", "OrderOriginUpdateInput!", "OrderOrigin"},
		"upsertOrderOrigin",
		[]string{"id", "hotelId", "hrId", "adviserId", "datetime", "duration", "job", "mode", "count", "countMale", "status"})

	return &OrderOriginExec{ret}
}

func (client *Client) DeleteOrderOrigin(params OrderOriginWhereUniqueInput) *OrderOriginExec {
	ret := client.Client.Delete(
		params,
		[2]string{"OrderOriginWhereUniqueInput!", "OrderOrigin"},
		"deleteOrderOrigin",
		[]string{"id", "hotelId", "hrId", "adviserId", "datetime", "duration", "job", "mode", "count", "countMale", "status"})

	return &OrderOriginExec{ret}
}

func (client *Client) DeleteManyOrderOrigins(params *OrderOriginWhereInput) *BatchPayloadExec {
	exec := client.Client.DeleteMany(params, "OrderOriginWhereInput", "deleteManyOrderOrigins")
	return &BatchPayloadExec{exec}
}

func (client *Client) CreateRegistrationChannel(params RegistrationChannelCreateInput) *RegistrationChannelExec {
	ret := client.Client.Create(
		params,
		[2]string{"RegistrationChannelCreateInput!", "RegistrationChannel"},
		"createRegistrationChannel",
		[]string{"id", "orderId", "type", "inviterId"})

	return &RegistrationChannelExec{ret}
}

type RegistrationChannelUpdateParams struct {
	Data  RegistrationChannelUpdateInput      `json:"data"`
	Where RegistrationChannelWhereUniqueInput `json:"where"`
}

func (client *Client) UpdateRegistrationChannel(params RegistrationChannelUpdateParams) *RegistrationChannelExec {
	ret := client.Client.Update(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[3]string{"RegistrationChannelUpdateInput!", "RegistrationChannelWhereUniqueInput!", "RegistrationChannel"},
		"updateRegistrationChannel",
		[]string{"id", "orderId", "type", "inviterId"})

	return &RegistrationChannelExec{ret}
}

type RegistrationChannelUpdateManyParams struct {
	Data  RegistrationChannelUpdateManyMutationInput `json:"data"`
	Where *RegistrationChannelWhereInput             `json:"where,omitempty"`
}

func (client *Client) UpdateManyRegistrationChannels(params RegistrationChannelUpdateManyParams) *BatchPayloadExec {
	exec := client.Client.UpdateMany(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[2]string{"RegistrationChannelUpdateManyMutationInput!", "RegistrationChannelWhereInput"},
		"updateManyRegistrationChannels")
	return &BatchPayloadExec{exec}
}

type RegistrationChannelUpsertParams struct {
	Where  RegistrationChannelWhereUniqueInput `json:"where"`
	Create RegistrationChannelCreateInput      `json:"create"`
	Update RegistrationChannelUpdateInput      `json:"update"`
}

func (client *Client) UpsertRegistrationChannel(params RegistrationChannelUpsertParams) *RegistrationChannelExec {
	uparams := &prisma.UpsertParams{
		Where:  params.Where,
		Create: params.Create,
		Update: params.Update,
	}
	ret := client.Client.Upsert(
		uparams,
		[4]string{"RegistrationChannelWhereUniqueInput!", "RegistrationChannelCreateInput!", "RegistrationChannelUpdateInput!", "RegistrationChannel"},
		"upsertRegistrationChannel",
		[]string{"id", "orderId", "type", "inviterId"})

	return &RegistrationChannelExec{ret}
}

func (client *Client) DeleteRegistrationChannel(params RegistrationChannelWhereUniqueInput) *RegistrationChannelExec {
	ret := client.Client.Delete(
		params,
		[2]string{"RegistrationChannelWhereUniqueInput!", "RegistrationChannel"},
		"deleteRegistrationChannel",
		[]string{"id", "orderId", "type", "inviterId"})

	return &RegistrationChannelExec{ret}
}

func (client *Client) DeleteManyRegistrationChannels(params *RegistrationChannelWhereInput) *BatchPayloadExec {
	exec := client.Client.DeleteMany(params, "RegistrationChannelWhereInput", "deleteManyRegistrationChannels")
	return &BatchPayloadExec{exec}
}

func (client *Client) CreateRemark(params RemarkCreateInput) *RemarkExec {
	ret := client.Client.Create(
		params,
		[2]string{"RemarkCreateInput!", "Remark"},
		"createRemark",
		[]string{"id", "ptId", "startDate", "endDate", "realSalary", "isWorked"})

	return &RemarkExec{ret}
}

type RemarkUpdateParams struct {
	Data  RemarkUpdateInput      `json:"data"`
	Where RemarkWhereUniqueInput `json:"where"`
}

func (client *Client) UpdateRemark(params RemarkUpdateParams) *RemarkExec {
	ret := client.Client.Update(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[3]string{"RemarkUpdateInput!", "RemarkWhereUniqueInput!", "Remark"},
		"updateRemark",
		[]string{"id", "ptId", "startDate", "endDate", "realSalary", "isWorked"})

	return &RemarkExec{ret}
}

type RemarkUpdateManyParams struct {
	Data  RemarkUpdateManyMutationInput `json:"data"`
	Where *RemarkWhereInput             `json:"where,omitempty"`
}

func (client *Client) UpdateManyRemarks(params RemarkUpdateManyParams) *BatchPayloadExec {
	exec := client.Client.UpdateMany(
		prisma.UpdateParams{
			Data:  params.Data,
			Where: params.Where,
		},
		[2]string{"RemarkUpdateManyMutationInput!", "RemarkWhereInput"},
		"updateManyRemarks")
	return &BatchPayloadExec{exec}
}

type RemarkUpsertParams struct {
	Where  RemarkWhereUniqueInput `json:"where"`
	Create RemarkCreateInput      `json:"create"`
	Update RemarkUpdateInput      `json:"update"`
}

func (client *Client) UpsertRemark(params RemarkUpsertParams) *RemarkExec {
	uparams := &prisma.UpsertParams{
		Where:  params.Where,
		Create: params.Create,
		Update: params.Update,
	}
	ret := client.Client.Upsert(
		uparams,
		[4]string{"RemarkWhereUniqueInput!", "RemarkCreateInput!", "RemarkUpdateInput!", "Remark"},
		"upsertRemark",
		[]string{"id", "ptId", "startDate", "endDate", "realSalary", "isWorked"})

	return &RemarkExec{ret}
}

func (client *Client) DeleteRemark(params RemarkWhereUniqueInput) *RemarkExec {
	ret := client.Client.Delete(
		params,
		[2]string{"RemarkWhereUniqueInput!", "Remark"},
		"deleteRemark",
		[]string{"id", "ptId", "startDate", "endDate", "realSalary", "isWorked"})

	return &RemarkExec{ret}
}

func (client *Client) DeleteManyRemarks(params *RemarkWhereInput) *BatchPayloadExec {
	exec := client.Client.DeleteMany(params, "RemarkWhereInput", "deleteManyRemarks")
	return &BatchPayloadExec{exec}
}

type OrderHotelModifyOrderByInput string

const (
	OrderHotelModifyOrderByInputIDAsc         OrderHotelModifyOrderByInput = "id_ASC"
	OrderHotelModifyOrderByInputIDDesc        OrderHotelModifyOrderByInput = "id_DESC"
	OrderHotelModifyOrderByInputRevisionAsc   OrderHotelModifyOrderByInput = "revision_ASC"
	OrderHotelModifyOrderByInputRevisionDesc  OrderHotelModifyOrderByInput = "revision_DESC"
	OrderHotelModifyOrderByInputTimestampAsc  OrderHotelModifyOrderByInput = "timestamp_ASC"
	OrderHotelModifyOrderByInputTimestampDesc OrderHotelModifyOrderByInput = "timestamp_DESC"
	OrderHotelModifyOrderByInputCountAsc      OrderHotelModifyOrderByInput = "count_ASC"
	OrderHotelModifyOrderByInputCountDesc     OrderHotelModifyOrderByInput = "count_DESC"
	OrderHotelModifyOrderByInputCountMaleAsc  OrderHotelModifyOrderByInput = "countMale_ASC"
	OrderHotelModifyOrderByInputCountMaleDesc OrderHotelModifyOrderByInput = "countMale_DESC"
	OrderHotelModifyOrderByInputDateTimeAsc   OrderHotelModifyOrderByInput = "dateTime_ASC"
	OrderHotelModifyOrderByInputDateTimeDesc  OrderHotelModifyOrderByInput = "dateTime_DESC"
	OrderHotelModifyOrderByInputDurationAsc   OrderHotelModifyOrderByInput = "duration_ASC"
	OrderHotelModifyOrderByInputDurationDesc  OrderHotelModifyOrderByInput = "duration_DESC"
	OrderHotelModifyOrderByInputModeAsc       OrderHotelModifyOrderByInput = "mode_ASC"
	OrderHotelModifyOrderByInputModeDesc      OrderHotelModifyOrderByInput = "mode_DESC"
	OrderHotelModifyOrderByInputCreatedAtAsc  OrderHotelModifyOrderByInput = "createdAt_ASC"
	OrderHotelModifyOrderByInputCreatedAtDesc OrderHotelModifyOrderByInput = "createdAt_DESC"
	OrderHotelModifyOrderByInputUpdatedAtAsc  OrderHotelModifyOrderByInput = "updatedAt_ASC"
	OrderHotelModifyOrderByInputUpdatedAtDesc OrderHotelModifyOrderByInput = "updatedAt_DESC"
)

type OrderAdviserModifyOrderByInput string

const (
	OrderAdviserModifyOrderByInputIDAsc            OrderAdviserModifyOrderByInput = "id_ASC"
	OrderAdviserModifyOrderByInputIDDesc           OrderAdviserModifyOrderByInput = "id_DESC"
	OrderAdviserModifyOrderByInputRevisionAsc      OrderAdviserModifyOrderByInput = "revision_ASC"
	OrderAdviserModifyOrderByInputRevisionDesc     OrderAdviserModifyOrderByInput = "revision_DESC"
	OrderAdviserModifyOrderByInputTimeStampAsc     OrderAdviserModifyOrderByInput = "timeStamp_ASC"
	OrderAdviserModifyOrderByInputTimeStampDesc    OrderAdviserModifyOrderByInput = "timeStamp_DESC"
	OrderAdviserModifyOrderByInputIsFloatAsc       OrderAdviserModifyOrderByInput = "isFloat_ASC"
	OrderAdviserModifyOrderByInputIsFloatDesc      OrderAdviserModifyOrderByInput = "isFloat_DESC"
	OrderAdviserModifyOrderByInputHourlySalaryAsc  OrderAdviserModifyOrderByInput = "hourlySalary_ASC"
	OrderAdviserModifyOrderByInputHourlySalaryDesc OrderAdviserModifyOrderByInput = "hourlySalary_DESC"
	OrderAdviserModifyOrderByInputWorkCountAsc     OrderAdviserModifyOrderByInput = "workCount_ASC"
	OrderAdviserModifyOrderByInputWorkCountDesc    OrderAdviserModifyOrderByInput = "workCount_DESC"
	OrderAdviserModifyOrderByInputAttentionAsc     OrderAdviserModifyOrderByInput = "attention_ASC"
	OrderAdviserModifyOrderByInputAttentionDesc    OrderAdviserModifyOrderByInput = "attention_DESC"
	OrderAdviserModifyOrderByInputCreatedAtAsc     OrderAdviserModifyOrderByInput = "createdAt_ASC"
	OrderAdviserModifyOrderByInputCreatedAtDesc    OrderAdviserModifyOrderByInput = "createdAt_DESC"
	OrderAdviserModifyOrderByInputUpdatedAtAsc     OrderAdviserModifyOrderByInput = "updatedAt_ASC"
	OrderAdviserModifyOrderByInputUpdatedAtDesc    OrderAdviserModifyOrderByInput = "updatedAt_DESC"
)

type OrderCandidateOrderByInput string

const (
	OrderCandidateOrderByInputIDAsc             OrderCandidateOrderByInput = "id_ASC"
	OrderCandidateOrderByInputIDDesc            OrderCandidateOrderByInput = "id_DESC"
	OrderCandidateOrderByInputAdviserIdAsc      OrderCandidateOrderByInput = "adviserId_ASC"
	OrderCandidateOrderByInputAdviserIdDesc     OrderCandidateOrderByInput = "adviserId_DESC"
	OrderCandidateOrderByInputAgentIdAsc        OrderCandidateOrderByInput = "agentId_ASC"
	OrderCandidateOrderByInputAgentIdDesc       OrderCandidateOrderByInput = "agentId_DESC"
	OrderCandidateOrderByInputPtIdAsc           OrderCandidateOrderByInput = "ptId_ASC"
	OrderCandidateOrderByInputPtIdDesc          OrderCandidateOrderByInput = "ptId_DESC"
	OrderCandidateOrderByInputApplyTimeAsc      OrderCandidateOrderByInput = "applyTime_ASC"
	OrderCandidateOrderByInputApplyTimeDesc     OrderCandidateOrderByInput = "applyTime_DESC"
	OrderCandidateOrderByInputSignInTimeAsc     OrderCandidateOrderByInput = "signInTime_ASC"
	OrderCandidateOrderByInputSignInTimeDesc    OrderCandidateOrderByInput = "signInTime_DESC"
	OrderCandidateOrderByInputPtStatusAsc       OrderCandidateOrderByInput = "ptStatus_ASC"
	OrderCandidateOrderByInputPtStatusDesc      OrderCandidateOrderByInput = "ptStatus_DESC"
	OrderCandidateOrderByInputPtPerformanceAsc  OrderCandidateOrderByInput = "ptPerformance_ASC"
	OrderCandidateOrderByInputPtPerformanceDesc OrderCandidateOrderByInput = "ptPerformance_DESC"
	OrderCandidateOrderByInputObjectReasonAsc   OrderCandidateOrderByInput = "objectReason_ASC"
	OrderCandidateOrderByInputObjectReasonDesc  OrderCandidateOrderByInput = "objectReason_DESC"
	OrderCandidateOrderByInputCreatedAtAsc      OrderCandidateOrderByInput = "createdAt_ASC"
	OrderCandidateOrderByInputCreatedAtDesc     OrderCandidateOrderByInput = "createdAt_DESC"
	OrderCandidateOrderByInputUpdatedAtAsc      OrderCandidateOrderByInput = "updatedAt_ASC"
	OrderCandidateOrderByInputUpdatedAtDesc     OrderCandidateOrderByInput = "updatedAt_DESC"
)

type OrderAgentOrderByInput string

const (
	OrderAgentOrderByInputIDAsc         OrderAgentOrderByInput = "id_ASC"
	OrderAgentOrderByInputIDDesc        OrderAgentOrderByInput = "id_DESC"
	OrderAgentOrderByInputOrderIdAsc    OrderAgentOrderByInput = "orderId_ASC"
	OrderAgentOrderByInputOrderIdDesc   OrderAgentOrderByInput = "orderId_DESC"
	OrderAgentOrderByInputAgentIdAsc    OrderAgentOrderByInput = "agentId_ASC"
	OrderAgentOrderByInputAgentIdDesc   OrderAgentOrderByInput = "agentId_DESC"
	OrderAgentOrderByInputCreatedAtAsc  OrderAgentOrderByInput = "createdAt_ASC"
	OrderAgentOrderByInputCreatedAtDesc OrderAgentOrderByInput = "createdAt_DESC"
	OrderAgentOrderByInputUpdatedAtAsc  OrderAgentOrderByInput = "updatedAt_ASC"
	OrderAgentOrderByInputUpdatedAtDesc OrderAgentOrderByInput = "updatedAt_DESC"
)

type OrderOriginOrderByInput string

const (
	OrderOriginOrderByInputIDAsc         OrderOriginOrderByInput = "id_ASC"
	OrderOriginOrderByInputIDDesc        OrderOriginOrderByInput = "id_DESC"
	OrderOriginOrderByInputHotelIdAsc    OrderOriginOrderByInput = "hotelId_ASC"
	OrderOriginOrderByInputHotelIdDesc   OrderOriginOrderByInput = "hotelId_DESC"
	OrderOriginOrderByInputHrIdAsc       OrderOriginOrderByInput = "hrId_ASC"
	OrderOriginOrderByInputHrIdDesc      OrderOriginOrderByInput = "hrId_DESC"
	OrderOriginOrderByInputAdviserIdAsc  OrderOriginOrderByInput = "adviserId_ASC"
	OrderOriginOrderByInputAdviserIdDesc OrderOriginOrderByInput = "adviserId_DESC"
	OrderOriginOrderByInputDatetimeAsc   OrderOriginOrderByInput = "datetime_ASC"
	OrderOriginOrderByInputDatetimeDesc  OrderOriginOrderByInput = "datetime_DESC"
	OrderOriginOrderByInputDurationAsc   OrderOriginOrderByInput = "duration_ASC"
	OrderOriginOrderByInputDurationDesc  OrderOriginOrderByInput = "duration_DESC"
	OrderOriginOrderByInputJobAsc        OrderOriginOrderByInput = "job_ASC"
	OrderOriginOrderByInputJobDesc       OrderOriginOrderByInput = "job_DESC"
	OrderOriginOrderByInputModeAsc       OrderOriginOrderByInput = "mode_ASC"
	OrderOriginOrderByInputModeDesc      OrderOriginOrderByInput = "mode_DESC"
	OrderOriginOrderByInputCountAsc      OrderOriginOrderByInput = "count_ASC"
	OrderOriginOrderByInputCountDesc     OrderOriginOrderByInput = "count_DESC"
	OrderOriginOrderByInputCountMaleAsc  OrderOriginOrderByInput = "countMale_ASC"
	OrderOriginOrderByInputCountMaleDesc OrderOriginOrderByInput = "countMale_DESC"
	OrderOriginOrderByInputStatusAsc     OrderOriginOrderByInput = "status_ASC"
	OrderOriginOrderByInputStatusDesc    OrderOriginOrderByInput = "status_DESC"
	OrderOriginOrderByInputCreatedAtAsc  OrderOriginOrderByInput = "createdAt_ASC"
	OrderOriginOrderByInputCreatedAtDesc OrderOriginOrderByInput = "createdAt_DESC"
	OrderOriginOrderByInputUpdatedAtAsc  OrderOriginOrderByInput = "updatedAt_ASC"
	OrderOriginOrderByInputUpdatedAtDesc OrderOriginOrderByInput = "updatedAt_DESC"
)

type RegistrationChannelOrderByInput string

const (
	RegistrationChannelOrderByInputIDAsc         RegistrationChannelOrderByInput = "id_ASC"
	RegistrationChannelOrderByInputIDDesc        RegistrationChannelOrderByInput = "id_DESC"
	RegistrationChannelOrderByInputOrderIdAsc    RegistrationChannelOrderByInput = "orderId_ASC"
	RegistrationChannelOrderByInputOrderIdDesc   RegistrationChannelOrderByInput = "orderId_DESC"
	RegistrationChannelOrderByInputTypeAsc       RegistrationChannelOrderByInput = "type_ASC"
	RegistrationChannelOrderByInputTypeDesc      RegistrationChannelOrderByInput = "type_DESC"
	RegistrationChannelOrderByInputInviterIdAsc  RegistrationChannelOrderByInput = "inviterId_ASC"
	RegistrationChannelOrderByInputInviterIdDesc RegistrationChannelOrderByInput = "inviterId_DESC"
	RegistrationChannelOrderByInputCreatedAtAsc  RegistrationChannelOrderByInput = "createdAt_ASC"
	RegistrationChannelOrderByInputCreatedAtDesc RegistrationChannelOrderByInput = "createdAt_DESC"
	RegistrationChannelOrderByInputUpdatedAtAsc  RegistrationChannelOrderByInput = "updatedAt_ASC"
	RegistrationChannelOrderByInputUpdatedAtDesc RegistrationChannelOrderByInput = "updatedAt_DESC"
)

type RemarkOrderByInput string

const (
	RemarkOrderByInputIDAsc          RemarkOrderByInput = "id_ASC"
	RemarkOrderByInputIDDesc         RemarkOrderByInput = "id_DESC"
	RemarkOrderByInputPtIdAsc        RemarkOrderByInput = "ptId_ASC"
	RemarkOrderByInputPtIdDesc       RemarkOrderByInput = "ptId_DESC"
	RemarkOrderByInputStartDateAsc   RemarkOrderByInput = "startDate_ASC"
	RemarkOrderByInputStartDateDesc  RemarkOrderByInput = "startDate_DESC"
	RemarkOrderByInputEndDateAsc     RemarkOrderByInput = "endDate_ASC"
	RemarkOrderByInputEndDateDesc    RemarkOrderByInput = "endDate_DESC"
	RemarkOrderByInputRealSalaryAsc  RemarkOrderByInput = "realSalary_ASC"
	RemarkOrderByInputRealSalaryDesc RemarkOrderByInput = "realSalary_DESC"
	RemarkOrderByInputIsWorkedAsc    RemarkOrderByInput = "isWorked_ASC"
	RemarkOrderByInputIsWorkedDesc   RemarkOrderByInput = "isWorked_DESC"
	RemarkOrderByInputCreatedAtAsc   RemarkOrderByInput = "createdAt_ASC"
	RemarkOrderByInputCreatedAtDesc  RemarkOrderByInput = "createdAt_DESC"
	RemarkOrderByInputUpdatedAtAsc   RemarkOrderByInput = "updatedAt_ASC"
	RemarkOrderByInputUpdatedAtDesc  RemarkOrderByInput = "updatedAt_DESC"
)

type MutationType string

const (
	MutationTypeCreated MutationType = "CREATED"
	MutationTypeUpdated MutationType = "UPDATED"
	MutationTypeDeleted MutationType = "DELETED"
)

type RemarkUpsertWithoutOrderCandidateInput struct {
	Update RemarkUpdateWithoutOrderCandidateDataInput `json:"update"`
	Create RemarkCreateWithoutOrderCandidateInput     `json:"create"`
}

type OrderAdviserModifyWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type OrderCandidateScalarWhereInput struct {
	ID                     *string                          `json:"id,omitempty"`
	IDNot                  *string                          `json:"id_not,omitempty"`
	IDIn                   []string                         `json:"id_in,omitempty"`
	IDNotIn                []string                         `json:"id_not_in,omitempty"`
	IDLt                   *string                          `json:"id_lt,omitempty"`
	IDLte                  *string                          `json:"id_lte,omitempty"`
	IDGt                   *string                          `json:"id_gt,omitempty"`
	IDGte                  *string                          `json:"id_gte,omitempty"`
	IDContains             *string                          `json:"id_contains,omitempty"`
	IDNotContains          *string                          `json:"id_not_contains,omitempty"`
	IDStartsWith           *string                          `json:"id_starts_with,omitempty"`
	IDNotStartsWith        *string                          `json:"id_not_starts_with,omitempty"`
	IDEndsWith             *string                          `json:"id_ends_with,omitempty"`
	IDNotEndsWith          *string                          `json:"id_not_ends_with,omitempty"`
	AdviserId              *string                          `json:"adviserId,omitempty"`
	AdviserIdNot           *string                          `json:"adviserId_not,omitempty"`
	AdviserIdIn            []string                         `json:"adviserId_in,omitempty"`
	AdviserIdNotIn         []string                         `json:"adviserId_not_in,omitempty"`
	AdviserIdLt            *string                          `json:"adviserId_lt,omitempty"`
	AdviserIdLte           *string                          `json:"adviserId_lte,omitempty"`
	AdviserIdGt            *string                          `json:"adviserId_gt,omitempty"`
	AdviserIdGte           *string                          `json:"adviserId_gte,omitempty"`
	AdviserIdContains      *string                          `json:"adviserId_contains,omitempty"`
	AdviserIdNotContains   *string                          `json:"adviserId_not_contains,omitempty"`
	AdviserIdStartsWith    *string                          `json:"adviserId_starts_with,omitempty"`
	AdviserIdNotStartsWith *string                          `json:"adviserId_not_starts_with,omitempty"`
	AdviserIdEndsWith      *string                          `json:"adviserId_ends_with,omitempty"`
	AdviserIdNotEndsWith   *string                          `json:"adviserId_not_ends_with,omitempty"`
	AgentId                *string                          `json:"agentId,omitempty"`
	AgentIdNot             *string                          `json:"agentId_not,omitempty"`
	AgentIdIn              []string                         `json:"agentId_in,omitempty"`
	AgentIdNotIn           []string                         `json:"agentId_not_in,omitempty"`
	AgentIdLt              *string                          `json:"agentId_lt,omitempty"`
	AgentIdLte             *string                          `json:"agentId_lte,omitempty"`
	AgentIdGt              *string                          `json:"agentId_gt,omitempty"`
	AgentIdGte             *string                          `json:"agentId_gte,omitempty"`
	AgentIdContains        *string                          `json:"agentId_contains,omitempty"`
	AgentIdNotContains     *string                          `json:"agentId_not_contains,omitempty"`
	AgentIdStartsWith      *string                          `json:"agentId_starts_with,omitempty"`
	AgentIdNotStartsWith   *string                          `json:"agentId_not_starts_with,omitempty"`
	AgentIdEndsWith        *string                          `json:"agentId_ends_with,omitempty"`
	AgentIdNotEndsWith     *string                          `json:"agentId_not_ends_with,omitempty"`
	PtId                   *string                          `json:"ptId,omitempty"`
	PtIdNot                *string                          `json:"ptId_not,omitempty"`
	PtIdIn                 []string                         `json:"ptId_in,omitempty"`
	PtIdNotIn              []string                         `json:"ptId_not_in,omitempty"`
	PtIdLt                 *string                          `json:"ptId_lt,omitempty"`
	PtIdLte                *string                          `json:"ptId_lte,omitempty"`
	PtIdGt                 *string                          `json:"ptId_gt,omitempty"`
	PtIdGte                *string                          `json:"ptId_gte,omitempty"`
	PtIdContains           *string                          `json:"ptId_contains,omitempty"`
	PtIdNotContains        *string                          `json:"ptId_not_contains,omitempty"`
	PtIdStartsWith         *string                          `json:"ptId_starts_with,omitempty"`
	PtIdNotStartsWith      *string                          `json:"ptId_not_starts_with,omitempty"`
	PtIdEndsWith           *string                          `json:"ptId_ends_with,omitempty"`
	PtIdNotEndsWith        *string                          `json:"ptId_not_ends_with,omitempty"`
	ApplyTime              *int32                           `json:"applyTime,omitempty"`
	ApplyTimeNot           *int32                           `json:"applyTime_not,omitempty"`
	ApplyTimeIn            []int32                          `json:"applyTime_in,omitempty"`
	ApplyTimeNotIn         []int32                          `json:"applyTime_not_in,omitempty"`
	ApplyTimeLt            *int32                           `json:"applyTime_lt,omitempty"`
	ApplyTimeLte           *int32                           `json:"applyTime_lte,omitempty"`
	ApplyTimeGt            *int32                           `json:"applyTime_gt,omitempty"`
	ApplyTimeGte           *int32                           `json:"applyTime_gte,omitempty"`
	SignInTime             *int32                           `json:"signInTime,omitempty"`
	SignInTimeNot          *int32                           `json:"signInTime_not,omitempty"`
	SignInTimeIn           []int32                          `json:"signInTime_in,omitempty"`
	SignInTimeNotIn        []int32                          `json:"signInTime_not_in,omitempty"`
	SignInTimeLt           *int32                           `json:"signInTime_lt,omitempty"`
	SignInTimeLte          *int32                           `json:"signInTime_lte,omitempty"`
	SignInTimeGt           *int32                           `json:"signInTime_gt,omitempty"`
	SignInTimeGte          *int32                           `json:"signInTime_gte,omitempty"`
	PtStatus               *int32                           `json:"ptStatus,omitempty"`
	PtStatusNot            *int32                           `json:"ptStatus_not,omitempty"`
	PtStatusIn             []int32                          `json:"ptStatus_in,omitempty"`
	PtStatusNotIn          []int32                          `json:"ptStatus_not_in,omitempty"`
	PtStatusLt             *int32                           `json:"ptStatus_lt,omitempty"`
	PtStatusLte            *int32                           `json:"ptStatus_lte,omitempty"`
	PtStatusGt             *int32                           `json:"ptStatus_gt,omitempty"`
	PtStatusGte            *int32                           `json:"ptStatus_gte,omitempty"`
	PtPerformance          *int32                           `json:"ptPerformance,omitempty"`
	PtPerformanceNot       *int32                           `json:"ptPerformance_not,omitempty"`
	PtPerformanceIn        []int32                          `json:"ptPerformance_in,omitempty"`
	PtPerformanceNotIn     []int32                          `json:"ptPerformance_not_in,omitempty"`
	PtPerformanceLt        *int32                           `json:"ptPerformance_lt,omitempty"`
	PtPerformanceLte       *int32                           `json:"ptPerformance_lte,omitempty"`
	PtPerformanceGt        *int32                           `json:"ptPerformance_gt,omitempty"`
	PtPerformanceGte       *int32                           `json:"ptPerformance_gte,omitempty"`
	ObjectReason           *int32                           `json:"objectReason,omitempty"`
	ObjectReasonNot        *int32                           `json:"objectReason_not,omitempty"`
	ObjectReasonIn         []int32                          `json:"objectReason_in,omitempty"`
	ObjectReasonNotIn      []int32                          `json:"objectReason_not_in,omitempty"`
	ObjectReasonLt         *int32                           `json:"objectReason_lt,omitempty"`
	ObjectReasonLte        *int32                           `json:"objectReason_lte,omitempty"`
	ObjectReasonGt         *int32                           `json:"objectReason_gt,omitempty"`
	ObjectReasonGte        *int32                           `json:"objectReason_gte,omitempty"`
	And                    []OrderCandidateScalarWhereInput `json:"AND,omitempty"`
	Or                     []OrderCandidateScalarWhereInput `json:"OR,omitempty"`
	Not                    []OrderCandidateScalarWhereInput `json:"NOT,omitempty"`
}

type RemarkWhereInput struct {
	ID                *string                   `json:"id,omitempty"`
	IDNot             *string                   `json:"id_not,omitempty"`
	IDIn              []string                  `json:"id_in,omitempty"`
	IDNotIn           []string                  `json:"id_not_in,omitempty"`
	IDLt              *string                   `json:"id_lt,omitempty"`
	IDLte             *string                   `json:"id_lte,omitempty"`
	IDGt              *string                   `json:"id_gt,omitempty"`
	IDGte             *string                   `json:"id_gte,omitempty"`
	IDContains        *string                   `json:"id_contains,omitempty"`
	IDNotContains     *string                   `json:"id_not_contains,omitempty"`
	IDStartsWith      *string                   `json:"id_starts_with,omitempty"`
	IDNotStartsWith   *string                   `json:"id_not_starts_with,omitempty"`
	IDEndsWith        *string                   `json:"id_ends_with,omitempty"`
	IDNotEndsWith     *string                   `json:"id_not_ends_with,omitempty"`
	PtId              *string                   `json:"ptId,omitempty"`
	PtIdNot           *string                   `json:"ptId_not,omitempty"`
	PtIdIn            []string                  `json:"ptId_in,omitempty"`
	PtIdNotIn         []string                  `json:"ptId_not_in,omitempty"`
	PtIdLt            *string                   `json:"ptId_lt,omitempty"`
	PtIdLte           *string                   `json:"ptId_lte,omitempty"`
	PtIdGt            *string                   `json:"ptId_gt,omitempty"`
	PtIdGte           *string                   `json:"ptId_gte,omitempty"`
	PtIdContains      *string                   `json:"ptId_contains,omitempty"`
	PtIdNotContains   *string                   `json:"ptId_not_contains,omitempty"`
	PtIdStartsWith    *string                   `json:"ptId_starts_with,omitempty"`
	PtIdNotStartsWith *string                   `json:"ptId_not_starts_with,omitempty"`
	PtIdEndsWith      *string                   `json:"ptId_ends_with,omitempty"`
	PtIdNotEndsWith   *string                   `json:"ptId_not_ends_with,omitempty"`
	StartDate         *int32                    `json:"startDate,omitempty"`
	StartDateNot      *int32                    `json:"startDate_not,omitempty"`
	StartDateIn       []int32                   `json:"startDate_in,omitempty"`
	StartDateNotIn    []int32                   `json:"startDate_not_in,omitempty"`
	StartDateLt       *int32                    `json:"startDate_lt,omitempty"`
	StartDateLte      *int32                    `json:"startDate_lte,omitempty"`
	StartDateGt       *int32                    `json:"startDate_gt,omitempty"`
	StartDateGte      *int32                    `json:"startDate_gte,omitempty"`
	EndDate           *int32                    `json:"endDate,omitempty"`
	EndDateNot        *int32                    `json:"endDate_not,omitempty"`
	EndDateIn         []int32                   `json:"endDate_in,omitempty"`
	EndDateNotIn      []int32                   `json:"endDate_not_in,omitempty"`
	EndDateLt         *int32                    `json:"endDate_lt,omitempty"`
	EndDateLte        *int32                    `json:"endDate_lte,omitempty"`
	EndDateGt         *int32                    `json:"endDate_gt,omitempty"`
	EndDateGte        *int32                    `json:"endDate_gte,omitempty"`
	RealSalary        *int32                    `json:"realSalary,omitempty"`
	RealSalaryNot     *int32                    `json:"realSalary_not,omitempty"`
	RealSalaryIn      []int32                   `json:"realSalary_in,omitempty"`
	RealSalaryNotIn   []int32                   `json:"realSalary_not_in,omitempty"`
	RealSalaryLt      *int32                    `json:"realSalary_lt,omitempty"`
	RealSalaryLte     *int32                    `json:"realSalary_lte,omitempty"`
	RealSalaryGt      *int32                    `json:"realSalary_gt,omitempty"`
	RealSalaryGte     *int32                    `json:"realSalary_gte,omitempty"`
	IsWorked          *int32                    `json:"isWorked,omitempty"`
	IsWorkedNot       *int32                    `json:"isWorked_not,omitempty"`
	IsWorkedIn        []int32                   `json:"isWorked_in,omitempty"`
	IsWorkedNotIn     []int32                   `json:"isWorked_not_in,omitempty"`
	IsWorkedLt        *int32                    `json:"isWorked_lt,omitempty"`
	IsWorkedLte       *int32                    `json:"isWorked_lte,omitempty"`
	IsWorkedGt        *int32                    `json:"isWorked_gt,omitempty"`
	IsWorkedGte       *int32                    `json:"isWorked_gte,omitempty"`
	OrderCandidate    *OrderCandidateWhereInput `json:"orderCandidate,omitempty"`
	And               []RemarkWhereInput        `json:"AND,omitempty"`
	Or                []RemarkWhereInput        `json:"OR,omitempty"`
	Not               []RemarkWhereInput        `json:"NOT,omitempty"`
}

type OrderCandidateUpdateManyWithWhereNestedInput struct {
	Where OrderCandidateScalarWhereInput    `json:"where"`
	Data  OrderCandidateUpdateManyDataInput `json:"data"`
}

type OrderCandidateWhereInput struct {
	ID                     *string                        `json:"id,omitempty"`
	IDNot                  *string                        `json:"id_not,omitempty"`
	IDIn                   []string                       `json:"id_in,omitempty"`
	IDNotIn                []string                       `json:"id_not_in,omitempty"`
	IDLt                   *string                        `json:"id_lt,omitempty"`
	IDLte                  *string                        `json:"id_lte,omitempty"`
	IDGt                   *string                        `json:"id_gt,omitempty"`
	IDGte                  *string                        `json:"id_gte,omitempty"`
	IDContains             *string                        `json:"id_contains,omitempty"`
	IDNotContains          *string                        `json:"id_not_contains,omitempty"`
	IDStartsWith           *string                        `json:"id_starts_with,omitempty"`
	IDNotStartsWith        *string                        `json:"id_not_starts_with,omitempty"`
	IDEndsWith             *string                        `json:"id_ends_with,omitempty"`
	IDNotEndsWith          *string                        `json:"id_not_ends_with,omitempty"`
	AdviserId              *string                        `json:"adviserId,omitempty"`
	AdviserIdNot           *string                        `json:"adviserId_not,omitempty"`
	AdviserIdIn            []string                       `json:"adviserId_in,omitempty"`
	AdviserIdNotIn         []string                       `json:"adviserId_not_in,omitempty"`
	AdviserIdLt            *string                        `json:"adviserId_lt,omitempty"`
	AdviserIdLte           *string                        `json:"adviserId_lte,omitempty"`
	AdviserIdGt            *string                        `json:"adviserId_gt,omitempty"`
	AdviserIdGte           *string                        `json:"adviserId_gte,omitempty"`
	AdviserIdContains      *string                        `json:"adviserId_contains,omitempty"`
	AdviserIdNotContains   *string                        `json:"adviserId_not_contains,omitempty"`
	AdviserIdStartsWith    *string                        `json:"adviserId_starts_with,omitempty"`
	AdviserIdNotStartsWith *string                        `json:"adviserId_not_starts_with,omitempty"`
	AdviserIdEndsWith      *string                        `json:"adviserId_ends_with,omitempty"`
	AdviserIdNotEndsWith   *string                        `json:"adviserId_not_ends_with,omitempty"`
	AgentId                *string                        `json:"agentId,omitempty"`
	AgentIdNot             *string                        `json:"agentId_not,omitempty"`
	AgentIdIn              []string                       `json:"agentId_in,omitempty"`
	AgentIdNotIn           []string                       `json:"agentId_not_in,omitempty"`
	AgentIdLt              *string                        `json:"agentId_lt,omitempty"`
	AgentIdLte             *string                        `json:"agentId_lte,omitempty"`
	AgentIdGt              *string                        `json:"agentId_gt,omitempty"`
	AgentIdGte             *string                        `json:"agentId_gte,omitempty"`
	AgentIdContains        *string                        `json:"agentId_contains,omitempty"`
	AgentIdNotContains     *string                        `json:"agentId_not_contains,omitempty"`
	AgentIdStartsWith      *string                        `json:"agentId_starts_with,omitempty"`
	AgentIdNotStartsWith   *string                        `json:"agentId_not_starts_with,omitempty"`
	AgentIdEndsWith        *string                        `json:"agentId_ends_with,omitempty"`
	AgentIdNotEndsWith     *string                        `json:"agentId_not_ends_with,omitempty"`
	PtId                   *string                        `json:"ptId,omitempty"`
	PtIdNot                *string                        `json:"ptId_not,omitempty"`
	PtIdIn                 []string                       `json:"ptId_in,omitempty"`
	PtIdNotIn              []string                       `json:"ptId_not_in,omitempty"`
	PtIdLt                 *string                        `json:"ptId_lt,omitempty"`
	PtIdLte                *string                        `json:"ptId_lte,omitempty"`
	PtIdGt                 *string                        `json:"ptId_gt,omitempty"`
	PtIdGte                *string                        `json:"ptId_gte,omitempty"`
	PtIdContains           *string                        `json:"ptId_contains,omitempty"`
	PtIdNotContains        *string                        `json:"ptId_not_contains,omitempty"`
	PtIdStartsWith         *string                        `json:"ptId_starts_with,omitempty"`
	PtIdNotStartsWith      *string                        `json:"ptId_not_starts_with,omitempty"`
	PtIdEndsWith           *string                        `json:"ptId_ends_with,omitempty"`
	PtIdNotEndsWith        *string                        `json:"ptId_not_ends_with,omitempty"`
	ApplyTime              *int32                         `json:"applyTime,omitempty"`
	ApplyTimeNot           *int32                         `json:"applyTime_not,omitempty"`
	ApplyTimeIn            []int32                        `json:"applyTime_in,omitempty"`
	ApplyTimeNotIn         []int32                        `json:"applyTime_not_in,omitempty"`
	ApplyTimeLt            *int32                         `json:"applyTime_lt,omitempty"`
	ApplyTimeLte           *int32                         `json:"applyTime_lte,omitempty"`
	ApplyTimeGt            *int32                         `json:"applyTime_gt,omitempty"`
	ApplyTimeGte           *int32                         `json:"applyTime_gte,omitempty"`
	SignInTime             *int32                         `json:"signInTime,omitempty"`
	SignInTimeNot          *int32                         `json:"signInTime_not,omitempty"`
	SignInTimeIn           []int32                        `json:"signInTime_in,omitempty"`
	SignInTimeNotIn        []int32                        `json:"signInTime_not_in,omitempty"`
	SignInTimeLt           *int32                         `json:"signInTime_lt,omitempty"`
	SignInTimeLte          *int32                         `json:"signInTime_lte,omitempty"`
	SignInTimeGt           *int32                         `json:"signInTime_gt,omitempty"`
	SignInTimeGte          *int32                         `json:"signInTime_gte,omitempty"`
	PtStatus               *int32                         `json:"ptStatus,omitempty"`
	PtStatusNot            *int32                         `json:"ptStatus_not,omitempty"`
	PtStatusIn             []int32                        `json:"ptStatus_in,omitempty"`
	PtStatusNotIn          []int32                        `json:"ptStatus_not_in,omitempty"`
	PtStatusLt             *int32                         `json:"ptStatus_lt,omitempty"`
	PtStatusLte            *int32                         `json:"ptStatus_lte,omitempty"`
	PtStatusGt             *int32                         `json:"ptStatus_gt,omitempty"`
	PtStatusGte            *int32                         `json:"ptStatus_gte,omitempty"`
	PtPerformance          *int32                         `json:"ptPerformance,omitempty"`
	PtPerformanceNot       *int32                         `json:"ptPerformance_not,omitempty"`
	PtPerformanceIn        []int32                        `json:"ptPerformance_in,omitempty"`
	PtPerformanceNotIn     []int32                        `json:"ptPerformance_not_in,omitempty"`
	PtPerformanceLt        *int32                         `json:"ptPerformance_lt,omitempty"`
	PtPerformanceLte       *int32                         `json:"ptPerformance_lte,omitempty"`
	PtPerformanceGt        *int32                         `json:"ptPerformance_gt,omitempty"`
	PtPerformanceGte       *int32                         `json:"ptPerformance_gte,omitempty"`
	ObjectReason           *int32                         `json:"objectReason,omitempty"`
	ObjectReasonNot        *int32                         `json:"objectReason_not,omitempty"`
	ObjectReasonIn         []int32                        `json:"objectReason_in,omitempty"`
	ObjectReasonNotIn      []int32                        `json:"objectReason_not_in,omitempty"`
	ObjectReasonLt         *int32                         `json:"objectReason_lt,omitempty"`
	ObjectReasonLte        *int32                         `json:"objectReason_lte,omitempty"`
	ObjectReasonGt         *int32                         `json:"objectReason_gt,omitempty"`
	ObjectReasonGte        *int32                         `json:"objectReason_gte,omitempty"`
	Remark                 *RemarkWhereInput              `json:"remark,omitempty"`
	RegistrationChannel    *RegistrationChannelWhereInput `json:"registrationChannel,omitempty"`
	OrderOrigin            *OrderOriginWhereInput         `json:"orderOrigin,omitempty"`
	And                    []OrderCandidateWhereInput     `json:"AND,omitempty"`
	Or                     []OrderCandidateWhereInput     `json:"OR,omitempty"`
	Not                    []OrderCandidateWhereInput     `json:"NOT,omitempty"`
}

type OrderCandidateUpdateManyDataInput struct {
	AdviserId     *string `json:"adviserId,omitempty"`
	AgentId       *string `json:"agentId,omitempty"`
	PtId          *string `json:"ptId,omitempty"`
	ApplyTime     *int32  `json:"applyTime,omitempty"`
	SignInTime    *int32  `json:"signInTime,omitempty"`
	PtStatus      *int32  `json:"ptStatus,omitempty"`
	PtPerformance *int32  `json:"ptPerformance,omitempty"`
	ObjectReason  *int32  `json:"objectReason,omitempty"`
}

type OrderAdviserModifyWhereInput struct {
	ID                     *string                        `json:"id,omitempty"`
	IDNot                  *string                        `json:"id_not,omitempty"`
	IDIn                   []string                       `json:"id_in,omitempty"`
	IDNotIn                []string                       `json:"id_not_in,omitempty"`
	IDLt                   *string                        `json:"id_lt,omitempty"`
	IDLte                  *string                        `json:"id_lte,omitempty"`
	IDGt                   *string                        `json:"id_gt,omitempty"`
	IDGte                  *string                        `json:"id_gte,omitempty"`
	IDContains             *string                        `json:"id_contains,omitempty"`
	IDNotContains          *string                        `json:"id_not_contains,omitempty"`
	IDStartsWith           *string                        `json:"id_starts_with,omitempty"`
	IDNotStartsWith        *string                        `json:"id_not_starts_with,omitempty"`
	IDEndsWith             *string                        `json:"id_ends_with,omitempty"`
	IDNotEndsWith          *string                        `json:"id_not_ends_with,omitempty"`
	Revision               *int32                         `json:"revision,omitempty"`
	RevisionNot            *int32                         `json:"revision_not,omitempty"`
	RevisionIn             []int32                        `json:"revision_in,omitempty"`
	RevisionNotIn          []int32                        `json:"revision_not_in,omitempty"`
	RevisionLt             *int32                         `json:"revision_lt,omitempty"`
	RevisionLte            *int32                         `json:"revision_lte,omitempty"`
	RevisionGt             *int32                         `json:"revision_gt,omitempty"`
	RevisionGte            *int32                         `json:"revision_gte,omitempty"`
	TimeStamp              *int32                         `json:"timeStamp,omitempty"`
	TimeStampNot           *int32                         `json:"timeStamp_not,omitempty"`
	TimeStampIn            []int32                        `json:"timeStamp_in,omitempty"`
	TimeStampNotIn         []int32                        `json:"timeStamp_not_in,omitempty"`
	TimeStampLt            *int32                         `json:"timeStamp_lt,omitempty"`
	TimeStampLte           *int32                         `json:"timeStamp_lte,omitempty"`
	TimeStampGt            *int32                         `json:"timeStamp_gt,omitempty"`
	TimeStampGte           *int32                         `json:"timeStamp_gte,omitempty"`
	IsFloat                *int32                         `json:"isFloat,omitempty"`
	IsFloatNot             *int32                         `json:"isFloat_not,omitempty"`
	IsFloatIn              []int32                        `json:"isFloat_in,omitempty"`
	IsFloatNotIn           []int32                        `json:"isFloat_not_in,omitempty"`
	IsFloatLt              *int32                         `json:"isFloat_lt,omitempty"`
	IsFloatLte             *int32                         `json:"isFloat_lte,omitempty"`
	IsFloatGt              *int32                         `json:"isFloat_gt,omitempty"`
	IsFloatGte             *int32                         `json:"isFloat_gte,omitempty"`
	HourlySalary           *int32                         `json:"hourlySalary,omitempty"`
	HourlySalaryNot        *int32                         `json:"hourlySalary_not,omitempty"`
	HourlySalaryIn         []int32                        `json:"hourlySalary_in,omitempty"`
	HourlySalaryNotIn      []int32                        `json:"hourlySalary_not_in,omitempty"`
	HourlySalaryLt         *int32                         `json:"hourlySalary_lt,omitempty"`
	HourlySalaryLte        *int32                         `json:"hourlySalary_lte,omitempty"`
	HourlySalaryGt         *int32                         `json:"hourlySalary_gt,omitempty"`
	HourlySalaryGte        *int32                         `json:"hourlySalary_gte,omitempty"`
	WorkCount              *string                        `json:"workCount,omitempty"`
	WorkCountNot           *string                        `json:"workCount_not,omitempty"`
	WorkCountIn            []string                       `json:"workCount_in,omitempty"`
	WorkCountNotIn         []string                       `json:"workCount_not_in,omitempty"`
	WorkCountLt            *string                        `json:"workCount_lt,omitempty"`
	WorkCountLte           *string                        `json:"workCount_lte,omitempty"`
	WorkCountGt            *string                        `json:"workCount_gt,omitempty"`
	WorkCountGte           *string                        `json:"workCount_gte,omitempty"`
	WorkCountContains      *string                        `json:"workCount_contains,omitempty"`
	WorkCountNotContains   *string                        `json:"workCount_not_contains,omitempty"`
	WorkCountStartsWith    *string                        `json:"workCount_starts_with,omitempty"`
	WorkCountNotStartsWith *string                        `json:"workCount_not_starts_with,omitempty"`
	WorkCountEndsWith      *string                        `json:"workCount_ends_with,omitempty"`
	WorkCountNotEndsWith   *string                        `json:"workCount_not_ends_with,omitempty"`
	Attention              *string                        `json:"attention,omitempty"`
	AttentionNot           *string                        `json:"attention_not,omitempty"`
	AttentionIn            []string                       `json:"attention_in,omitempty"`
	AttentionNotIn         []string                       `json:"attention_not_in,omitempty"`
	AttentionLt            *string                        `json:"attention_lt,omitempty"`
	AttentionLte           *string                        `json:"attention_lte,omitempty"`
	AttentionGt            *string                        `json:"attention_gt,omitempty"`
	AttentionGte           *string                        `json:"attention_gte,omitempty"`
	AttentionContains      *string                        `json:"attention_contains,omitempty"`
	AttentionNotContains   *string                        `json:"attention_not_contains,omitempty"`
	AttentionStartsWith    *string                        `json:"attention_starts_with,omitempty"`
	AttentionNotStartsWith *string                        `json:"attention_not_starts_with,omitempty"`
	AttentionEndsWith      *string                        `json:"attention_ends_with,omitempty"`
	AttentionNotEndsWith   *string                        `json:"attention_not_ends_with,omitempty"`
	OrderOrigin            *OrderOriginWhereInput         `json:"orderOrigin,omitempty"`
	And                    []OrderAdviserModifyWhereInput `json:"AND,omitempty"`
	Or                     []OrderAdviserModifyWhereInput `json:"OR,omitempty"`
	Not                    []OrderAdviserModifyWhereInput `json:"NOT,omitempty"`
}

type RegistrationChannelCreateWithoutOrderCandidateInput struct {
	OrderId   string  `json:"orderId"`
	Type      int32   `json:"type"`
	InviterId *string `json:"inviterId,omitempty"`
}

type OrderHotelModifyCreateInput struct {
	Revision    int32                                              `json:"revision"`
	Timestamp   int32                                              `json:"timestamp"`
	Count       *int32                                             `json:"count,omitempty"`
	CountMale   *int32                                             `json:"countMale,omitempty"`
	DateTime    *int32                                             `json:"dateTime,omitempty"`
	Duration    *int32                                             `json:"duration,omitempty"`
	Mode        *int32                                             `json:"mode,omitempty"`
	OrderOrigin OrderOriginCreateOneWithoutOrderHotelModifiesInput `json:"orderOrigin"`
}

type OrderAdviserModifyUpdateInput struct {
	Revision     *int32                                                        `json:"revision,omitempty"`
	TimeStamp    *int32                                                        `json:"timeStamp,omitempty"`
	IsFloat      *int32                                                        `json:"isFloat,omitempty"`
	HourlySalary *int32                                                        `json:"hourlySalary,omitempty"`
	WorkCount    *string                                                       `json:"workCount,omitempty"`
	Attention    *string                                                       `json:"attention,omitempty"`
	OrderOrigin  *OrderOriginUpdateOneRequiredWithoutOrderAdviserModifiesInput `json:"orderOrigin,omitempty"`
}

type OrderOriginUpsertWithoutOrderAdviserModifiesInput struct {
	Update OrderOriginUpdateWithoutOrderAdviserModifiesDataInput `json:"update"`
	Create OrderOriginCreateWithoutOrderAdviserModifiesInput     `json:"create"`
}

type OrderOriginUpdateOneRequiredWithoutOrderAdviserModifiesInput struct {
	Create  *OrderOriginCreateWithoutOrderAdviserModifiesInput     `json:"create,omitempty"`
	Update  *OrderOriginUpdateWithoutOrderAdviserModifiesDataInput `json:"update,omitempty"`
	Upsert  *OrderOriginUpsertWithoutOrderAdviserModifiesInput     `json:"upsert,omitempty"`
	Connect *OrderOriginWhereUniqueInput                           `json:"connect,omitempty"`
}

type RegistrationChannelSubscriptionWhereInput struct {
	MutationIn                 []MutationType                              `json:"mutation_in,omitempty"`
	UpdatedFieldsContains      *string                                     `json:"updatedFields_contains,omitempty"`
	UpdatedFieldsContainsEvery []string                                    `json:"updatedFields_contains_every,omitempty"`
	UpdatedFieldsContainsSome  []string                                    `json:"updatedFields_contains_some,omitempty"`
	Node                       *RegistrationChannelWhereInput              `json:"node,omitempty"`
	And                        []RegistrationChannelSubscriptionWhereInput `json:"AND,omitempty"`
	Or                         []RegistrationChannelSubscriptionWhereInput `json:"OR,omitempty"`
	Not                        []RegistrationChannelSubscriptionWhereInput `json:"NOT,omitempty"`
}

type OrderOriginUpdateWithoutOrderAdviserModifiesDataInput struct {
	HotelId            *string                                            `json:"hotelId,omitempty"`
	HrId               *string                                            `json:"hrId,omitempty"`
	AdviserId          *string                                            `json:"adviserId,omitempty"`
	Datetime           *int32                                             `json:"datetime,omitempty"`
	Duration           *int32                                             `json:"duration,omitempty"`
	Job                *string                                            `json:"job,omitempty"`
	Mode               *int32                                             `json:"mode,omitempty"`
	Count              *int32                                             `json:"count,omitempty"`
	CountMale          *int32                                             `json:"countMale,omitempty"`
	Status             *int32                                             `json:"status,omitempty"`
	OrderHotelModifies *OrderHotelModifyUpdateManyWithoutOrderOriginInput `json:"orderHotelModifies,omitempty"`
	OrderCandidates    *OrderCandidateUpdateManyWithoutOrderOriginInput   `json:"orderCandidates,omitempty"`
}

type OrderHotelModifySubscriptionWhereInput struct {
	MutationIn                 []MutationType                           `json:"mutation_in,omitempty"`
	UpdatedFieldsContains      *string                                  `json:"updatedFields_contains,omitempty"`
	UpdatedFieldsContainsEvery []string                                 `json:"updatedFields_contains_every,omitempty"`
	UpdatedFieldsContainsSome  []string                                 `json:"updatedFields_contains_some,omitempty"`
	Node                       *OrderHotelModifyWhereInput              `json:"node,omitempty"`
	And                        []OrderHotelModifySubscriptionWhereInput `json:"AND,omitempty"`
	Or                         []OrderHotelModifySubscriptionWhereInput `json:"OR,omitempty"`
	Not                        []OrderHotelModifySubscriptionWhereInput `json:"NOT,omitempty"`
}

type OrderHotelModifyUpdateManyWithoutOrderOriginInput struct {
	Create     []OrderHotelModifyCreateWithoutOrderOriginInput                `json:"create,omitempty"`
	Delete     []OrderHotelModifyWhereUniqueInput                             `json:"delete,omitempty"`
	Connect    []OrderHotelModifyWhereUniqueInput                             `json:"connect,omitempty"`
	Set        []OrderHotelModifyWhereUniqueInput                             `json:"set,omitempty"`
	Disconnect []OrderHotelModifyWhereUniqueInput                             `json:"disconnect,omitempty"`
	Update     []OrderHotelModifyUpdateWithWhereUniqueWithoutOrderOriginInput `json:"update,omitempty"`
	Upsert     []OrderHotelModifyUpsertWithWhereUniqueWithoutOrderOriginInput `json:"upsert,omitempty"`
	DeleteMany []OrderHotelModifyScalarWhereInput                             `json:"deleteMany,omitempty"`
	UpdateMany []OrderHotelModifyUpdateManyWithWhereNestedInput               `json:"updateMany,omitempty"`
}

type OrderAgentSubscriptionWhereInput struct {
	MutationIn                 []MutationType                     `json:"mutation_in,omitempty"`
	UpdatedFieldsContains      *string                            `json:"updatedFields_contains,omitempty"`
	UpdatedFieldsContainsEvery []string                           `json:"updatedFields_contains_every,omitempty"`
	UpdatedFieldsContainsSome  []string                           `json:"updatedFields_contains_some,omitempty"`
	Node                       *OrderAgentWhereInput              `json:"node,omitempty"`
	And                        []OrderAgentSubscriptionWhereInput `json:"AND,omitempty"`
	Or                         []OrderAgentSubscriptionWhereInput `json:"OR,omitempty"`
	Not                        []OrderAgentSubscriptionWhereInput `json:"NOT,omitempty"`
}

type OrderHotelModifyUpdateWithWhereUniqueWithoutOrderOriginInput struct {
	Where OrderHotelModifyWhereUniqueInput                  `json:"where"`
	Data  OrderHotelModifyUpdateWithoutOrderOriginDataInput `json:"data"`
}

type OrderAdviserModifySubscriptionWhereInput struct {
	MutationIn                 []MutationType                             `json:"mutation_in,omitempty"`
	UpdatedFieldsContains      *string                                    `json:"updatedFields_contains,omitempty"`
	UpdatedFieldsContainsEvery []string                                   `json:"updatedFields_contains_every,omitempty"`
	UpdatedFieldsContainsSome  []string                                   `json:"updatedFields_contains_some,omitempty"`
	Node                       *OrderAdviserModifyWhereInput              `json:"node,omitempty"`
	And                        []OrderAdviserModifySubscriptionWhereInput `json:"AND,omitempty"`
	Or                         []OrderAdviserModifySubscriptionWhereInput `json:"OR,omitempty"`
	Not                        []OrderAdviserModifySubscriptionWhereInput `json:"NOT,omitempty"`
}

type OrderHotelModifyUpdateWithoutOrderOriginDataInput struct {
	Revision  *int32 `json:"revision,omitempty"`
	Timestamp *int32 `json:"timestamp,omitempty"`
	Count     *int32 `json:"count,omitempty"`
	CountMale *int32 `json:"countMale,omitempty"`
	DateTime  *int32 `json:"dateTime,omitempty"`
	Duration  *int32 `json:"duration,omitempty"`
	Mode      *int32 `json:"mode,omitempty"`
}

type OrderHotelModifyWhereInput struct {
	ID              *string                      `json:"id,omitempty"`
	IDNot           *string                      `json:"id_not,omitempty"`
	IDIn            []string                     `json:"id_in,omitempty"`
	IDNotIn         []string                     `json:"id_not_in,omitempty"`
	IDLt            *string                      `json:"id_lt,omitempty"`
	IDLte           *string                      `json:"id_lte,omitempty"`
	IDGt            *string                      `json:"id_gt,omitempty"`
	IDGte           *string                      `json:"id_gte,omitempty"`
	IDContains      *string                      `json:"id_contains,omitempty"`
	IDNotContains   *string                      `json:"id_not_contains,omitempty"`
	IDStartsWith    *string                      `json:"id_starts_with,omitempty"`
	IDNotStartsWith *string                      `json:"id_not_starts_with,omitempty"`
	IDEndsWith      *string                      `json:"id_ends_with,omitempty"`
	IDNotEndsWith   *string                      `json:"id_not_ends_with,omitempty"`
	Revision        *int32                       `json:"revision,omitempty"`
	RevisionNot     *int32                       `json:"revision_not,omitempty"`
	RevisionIn      []int32                      `json:"revision_in,omitempty"`
	RevisionNotIn   []int32                      `json:"revision_not_in,omitempty"`
	RevisionLt      *int32                       `json:"revision_lt,omitempty"`
	RevisionLte     *int32                       `json:"revision_lte,omitempty"`
	RevisionGt      *int32                       `json:"revision_gt,omitempty"`
	RevisionGte     *int32                       `json:"revision_gte,omitempty"`
	Timestamp       *int32                       `json:"timestamp,omitempty"`
	TimestampNot    *int32                       `json:"timestamp_not,omitempty"`
	TimestampIn     []int32                      `json:"timestamp_in,omitempty"`
	TimestampNotIn  []int32                      `json:"timestamp_not_in,omitempty"`
	TimestampLt     *int32                       `json:"timestamp_lt,omitempty"`
	TimestampLte    *int32                       `json:"timestamp_lte,omitempty"`
	TimestampGt     *int32                       `json:"timestamp_gt,omitempty"`
	TimestampGte    *int32                       `json:"timestamp_gte,omitempty"`
	Count           *int32                       `json:"count,omitempty"`
	CountNot        *int32                       `json:"count_not,omitempty"`
	CountIn         []int32                      `json:"count_in,omitempty"`
	CountNotIn      []int32                      `json:"count_not_in,omitempty"`
	CountLt         *int32                       `json:"count_lt,omitempty"`
	CountLte        *int32                       `json:"count_lte,omitempty"`
	CountGt         *int32                       `json:"count_gt,omitempty"`
	CountGte        *int32                       `json:"count_gte,omitempty"`
	CountMale       *int32                       `json:"countMale,omitempty"`
	CountMaleNot    *int32                       `json:"countMale_not,omitempty"`
	CountMaleIn     []int32                      `json:"countMale_in,omitempty"`
	CountMaleNotIn  []int32                      `json:"countMale_not_in,omitempty"`
	CountMaleLt     *int32                       `json:"countMale_lt,omitempty"`
	CountMaleLte    *int32                       `json:"countMale_lte,omitempty"`
	CountMaleGt     *int32                       `json:"countMale_gt,omitempty"`
	CountMaleGte    *int32                       `json:"countMale_gte,omitempty"`
	DateTime        *int32                       `json:"dateTime,omitempty"`
	DateTimeNot     *int32                       `json:"dateTime_not,omitempty"`
	DateTimeIn      []int32                      `json:"dateTime_in,omitempty"`
	DateTimeNotIn   []int32                      `json:"dateTime_not_in,omitempty"`
	DateTimeLt      *int32                       `json:"dateTime_lt,omitempty"`
	DateTimeLte     *int32                       `json:"dateTime_lte,omitempty"`
	DateTimeGt      *int32                       `json:"dateTime_gt,omitempty"`
	DateTimeGte     *int32                       `json:"dateTime_gte,omitempty"`
	Duration        *int32                       `json:"duration,omitempty"`
	DurationNot     *int32                       `json:"duration_not,omitempty"`
	DurationIn      []int32                      `json:"duration_in,omitempty"`
	DurationNotIn   []int32                      `json:"duration_not_in,omitempty"`
	DurationLt      *int32                       `json:"duration_lt,omitempty"`
	DurationLte     *int32                       `json:"duration_lte,omitempty"`
	DurationGt      *int32                       `json:"duration_gt,omitempty"`
	DurationGte     *int32                       `json:"duration_gte,omitempty"`
	Mode            *int32                       `json:"mode,omitempty"`
	ModeNot         *int32                       `json:"mode_not,omitempty"`
	ModeIn          []int32                      `json:"mode_in,omitempty"`
	ModeNotIn       []int32                      `json:"mode_not_in,omitempty"`
	ModeLt          *int32                       `json:"mode_lt,omitempty"`
	ModeLte         *int32                       `json:"mode_lte,omitempty"`
	ModeGt          *int32                       `json:"mode_gt,omitempty"`
	ModeGte         *int32                       `json:"mode_gte,omitempty"`
	OrderOrigin     *OrderOriginWhereInput       `json:"orderOrigin,omitempty"`
	And             []OrderHotelModifyWhereInput `json:"AND,omitempty"`
	Or              []OrderHotelModifyWhereInput `json:"OR,omitempty"`
	Not             []OrderHotelModifyWhereInput `json:"NOT,omitempty"`
}

type OrderHotelModifyUpsertWithWhereUniqueWithoutOrderOriginInput struct {
	Where  OrderHotelModifyWhereUniqueInput                  `json:"where"`
	Update OrderHotelModifyUpdateWithoutOrderOriginDataInput `json:"update"`
	Create OrderHotelModifyCreateWithoutOrderOriginInput     `json:"create"`
}

type OrderCandidateUpsertWithoutRemarkInput struct {
	Update OrderCandidateUpdateWithoutRemarkDataInput `json:"update"`
	Create OrderCandidateCreateWithoutRemarkInput     `json:"create"`
}

type OrderHotelModifyScalarWhereInput struct {
	ID              *string                            `json:"id,omitempty"`
	IDNot           *string                            `json:"id_not,omitempty"`
	IDIn            []string                           `json:"id_in,omitempty"`
	IDNotIn         []string                           `json:"id_not_in,omitempty"`
	IDLt            *string                            `json:"id_lt,omitempty"`
	IDLte           *string                            `json:"id_lte,omitempty"`
	IDGt            *string                            `json:"id_gt,omitempty"`
	IDGte           *string                            `json:"id_gte,omitempty"`
	IDContains      *string                            `json:"id_contains,omitempty"`
	IDNotContains   *string                            `json:"id_not_contains,omitempty"`
	IDStartsWith    *string                            `json:"id_starts_with,omitempty"`
	IDNotStartsWith *string                            `json:"id_not_starts_with,omitempty"`
	IDEndsWith      *string                            `json:"id_ends_with,omitempty"`
	IDNotEndsWith   *string                            `json:"id_not_ends_with,omitempty"`
	Revision        *int32                             `json:"revision,omitempty"`
	RevisionNot     *int32                             `json:"revision_not,omitempty"`
	RevisionIn      []int32                            `json:"revision_in,omitempty"`
	RevisionNotIn   []int32                            `json:"revision_not_in,omitempty"`
	RevisionLt      *int32                             `json:"revision_lt,omitempty"`
	RevisionLte     *int32                             `json:"revision_lte,omitempty"`
	RevisionGt      *int32                             `json:"revision_gt,omitempty"`
	RevisionGte     *int32                             `json:"revision_gte,omitempty"`
	Timestamp       *int32                             `json:"timestamp,omitempty"`
	TimestampNot    *int32                             `json:"timestamp_not,omitempty"`
	TimestampIn     []int32                            `json:"timestamp_in,omitempty"`
	TimestampNotIn  []int32                            `json:"timestamp_not_in,omitempty"`
	TimestampLt     *int32                             `json:"timestamp_lt,omitempty"`
	TimestampLte    *int32                             `json:"timestamp_lte,omitempty"`
	TimestampGt     *int32                             `json:"timestamp_gt,omitempty"`
	TimestampGte    *int32                             `json:"timestamp_gte,omitempty"`
	Count           *int32                             `json:"count,omitempty"`
	CountNot        *int32                             `json:"count_not,omitempty"`
	CountIn         []int32                            `json:"count_in,omitempty"`
	CountNotIn      []int32                            `json:"count_not_in,omitempty"`
	CountLt         *int32                             `json:"count_lt,omitempty"`
	CountLte        *int32                             `json:"count_lte,omitempty"`
	CountGt         *int32                             `json:"count_gt,omitempty"`
	CountGte        *int32                             `json:"count_gte,omitempty"`
	CountMale       *int32                             `json:"countMale,omitempty"`
	CountMaleNot    *int32                             `json:"countMale_not,omitempty"`
	CountMaleIn     []int32                            `json:"countMale_in,omitempty"`
	CountMaleNotIn  []int32                            `json:"countMale_not_in,omitempty"`
	CountMaleLt     *int32                             `json:"countMale_lt,omitempty"`
	CountMaleLte    *int32                             `json:"countMale_lte,omitempty"`
	CountMaleGt     *int32                             `json:"countMale_gt,omitempty"`
	CountMaleGte    *int32                             `json:"countMale_gte,omitempty"`
	DateTime        *int32                             `json:"dateTime,omitempty"`
	DateTimeNot     *int32                             `json:"dateTime_not,omitempty"`
	DateTimeIn      []int32                            `json:"dateTime_in,omitempty"`
	DateTimeNotIn   []int32                            `json:"dateTime_not_in,omitempty"`
	DateTimeLt      *int32                             `json:"dateTime_lt,omitempty"`
	DateTimeLte     *int32                             `json:"dateTime_lte,omitempty"`
	DateTimeGt      *int32                             `json:"dateTime_gt,omitempty"`
	DateTimeGte     *int32                             `json:"dateTime_gte,omitempty"`
	Duration        *int32                             `json:"duration,omitempty"`
	DurationNot     *int32                             `json:"duration_not,omitempty"`
	DurationIn      []int32                            `json:"duration_in,omitempty"`
	DurationNotIn   []int32                            `json:"duration_not_in,omitempty"`
	DurationLt      *int32                             `json:"duration_lt,omitempty"`
	DurationLte     *int32                             `json:"duration_lte,omitempty"`
	DurationGt      *int32                             `json:"duration_gt,omitempty"`
	DurationGte     *int32                             `json:"duration_gte,omitempty"`
	Mode            *int32                             `json:"mode,omitempty"`
	ModeNot         *int32                             `json:"mode_not,omitempty"`
	ModeIn          []int32                            `json:"mode_in,omitempty"`
	ModeNotIn       []int32                            `json:"mode_not_in,omitempty"`
	ModeLt          *int32                             `json:"mode_lt,omitempty"`
	ModeLte         *int32                             `json:"mode_lte,omitempty"`
	ModeGt          *int32                             `json:"mode_gt,omitempty"`
	ModeGte         *int32                             `json:"mode_gte,omitempty"`
	And             []OrderHotelModifyScalarWhereInput `json:"AND,omitempty"`
	Or              []OrderHotelModifyScalarWhereInput `json:"OR,omitempty"`
	Not             []OrderHotelModifyScalarWhereInput `json:"NOT,omitempty"`
}

type OrderCandidateWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type OrderHotelModifyUpdateManyWithWhereNestedInput struct {
	Where OrderHotelModifyScalarWhereInput    `json:"where"`
	Data  OrderHotelModifyUpdateManyDataInput `json:"data"`
}

type RemarkUpdateInput struct {
	PtId           *string                                            `json:"ptId,omitempty"`
	StartDate      *int32                                             `json:"startDate,omitempty"`
	EndDate        *int32                                             `json:"endDate,omitempty"`
	RealSalary     *int32                                             `json:"realSalary,omitempty"`
	IsWorked       *int32                                             `json:"isWorked,omitempty"`
	OrderCandidate *OrderCandidateUpdateOneRequiredWithoutRemarkInput `json:"orderCandidate,omitempty"`
}

type OrderHotelModifyUpdateManyDataInput struct {
	Revision  *int32 `json:"revision,omitempty"`
	Timestamp *int32 `json:"timestamp,omitempty"`
	Count     *int32 `json:"count,omitempty"`
	CountMale *int32 `json:"countMale,omitempty"`
	DateTime  *int32 `json:"dateTime,omitempty"`
	Duration  *int32 `json:"duration,omitempty"`
	Mode      *int32 `json:"mode,omitempty"`
}

type OrderHotelModifyWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type OrderCandidateUpdateManyWithoutOrderOriginInput struct {
	Create     []OrderCandidateCreateWithoutOrderOriginInput                `json:"create,omitempty"`
	Delete     []OrderCandidateWhereUniqueInput                             `json:"delete,omitempty"`
	Connect    []OrderCandidateWhereUniqueInput                             `json:"connect,omitempty"`
	Set        []OrderCandidateWhereUniqueInput                             `json:"set,omitempty"`
	Disconnect []OrderCandidateWhereUniqueInput                             `json:"disconnect,omitempty"`
	Update     []OrderCandidateUpdateWithWhereUniqueWithoutOrderOriginInput `json:"update,omitempty"`
	Upsert     []OrderCandidateUpsertWithWhereUniqueWithoutOrderOriginInput `json:"upsert,omitempty"`
	DeleteMany []OrderCandidateScalarWhereInput                             `json:"deleteMany,omitempty"`
	UpdateMany []OrderCandidateUpdateManyWithWhereNestedInput               `json:"updateMany,omitempty"`
}

type RemarkCreateInput struct {
	PtId           string                                    `json:"ptId"`
	StartDate      *int32                                    `json:"startDate,omitempty"`
	EndDate        *int32                                    `json:"endDate,omitempty"`
	RealSalary     *int32                                    `json:"realSalary,omitempty"`
	IsWorked       int32                                     `json:"isWorked"`
	OrderCandidate OrderCandidateCreateOneWithoutRemarkInput `json:"orderCandidate"`
}

type OrderCandidateUpdateWithWhereUniqueWithoutOrderOriginInput struct {
	Where OrderCandidateWhereUniqueInput                  `json:"where"`
	Data  OrderCandidateUpdateWithoutOrderOriginDataInput `json:"data"`
}

type OrderOriginWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type OrderCandidateUpdateWithoutOrderOriginDataInput struct {
	AdviserId           *string                                                         `json:"adviserId,omitempty"`
	AgentId             *string                                                         `json:"agentId,omitempty"`
	PtId                *string                                                         `json:"ptId,omitempty"`
	ApplyTime           *int32                                                          `json:"applyTime,omitempty"`
	SignInTime          *int32                                                          `json:"signInTime,omitempty"`
	PtStatus            *int32                                                          `json:"ptStatus,omitempty"`
	PtPerformance       *int32                                                          `json:"ptPerformance,omitempty"`
	ObjectReason        *int32                                                          `json:"objectReason,omitempty"`
	Remark              *RemarkUpdateOneWithoutOrderCandidateInput                      `json:"remark,omitempty"`
	RegistrationChannel *RegistrationChannelUpdateOneRequiredWithoutOrderCandidateInput `json:"registrationChannel,omitempty"`
}

type OrderCandidateUpdateWithoutRegistrationChannelDataInput struct {
	AdviserId     *string                                                  `json:"adviserId,omitempty"`
	AgentId       *string                                                  `json:"agentId,omitempty"`
	PtId          *string                                                  `json:"ptId,omitempty"`
	ApplyTime     *int32                                                   `json:"applyTime,omitempty"`
	SignInTime    *int32                                                   `json:"signInTime,omitempty"`
	PtStatus      *int32                                                   `json:"ptStatus,omitempty"`
	PtPerformance *int32                                                   `json:"ptPerformance,omitempty"`
	ObjectReason  *int32                                                   `json:"objectReason,omitempty"`
	Remark        *RemarkUpdateOneWithoutOrderCandidateInput               `json:"remark,omitempty"`
	OrderOrigin   *OrderOriginUpdateOneRequiredWithoutOrderCandidatesInput `json:"orderOrigin,omitempty"`
}

type RemarkUpdateOneWithoutOrderCandidateInput struct {
	Create     *RemarkCreateWithoutOrderCandidateInput     `json:"create,omitempty"`
	Update     *RemarkUpdateWithoutOrderCandidateDataInput `json:"update,omitempty"`
	Upsert     *RemarkUpsertWithoutOrderCandidateInput     `json:"upsert,omitempty"`
	Delete     *bool                                       `json:"delete,omitempty"`
	Disconnect *bool                                       `json:"disconnect,omitempty"`
	Connect    *RemarkWhereUniqueInput                     `json:"connect,omitempty"`
}

type RegistrationChannelUpdateInput struct {
	OrderId        *string                                                         `json:"orderId,omitempty"`
	Type           *int32                                                          `json:"type,omitempty"`
	InviterId      *string                                                         `json:"inviterId,omitempty"`
	OrderCandidate *OrderCandidateUpdateOneRequiredWithoutRegistrationChannelInput `json:"orderCandidate,omitempty"`
}

type RemarkUpdateWithoutOrderCandidateDataInput struct {
	PtId       *string `json:"ptId,omitempty"`
	StartDate  *int32  `json:"startDate,omitempty"`
	EndDate    *int32  `json:"endDate,omitempty"`
	RealSalary *int32  `json:"realSalary,omitempty"`
	IsWorked   *int32  `json:"isWorked,omitempty"`
}

type OrderCandidateCreateWithoutRegistrationChannelInput struct {
	AdviserId     string                                          `json:"adviserId"`
	AgentId       string                                          `json:"agentId"`
	PtId          string                                          `json:"ptId"`
	ApplyTime     *int32                                          `json:"applyTime,omitempty"`
	SignInTime    *int32                                          `json:"signInTime,omitempty"`
	PtStatus      int32                                           `json:"ptStatus"`
	PtPerformance *int32                                          `json:"ptPerformance,omitempty"`
	ObjectReason  *int32                                          `json:"objectReason,omitempty"`
	Remark        *RemarkCreateOneWithoutOrderCandidateInput      `json:"remark,omitempty"`
	OrderOrigin   OrderOriginCreateOneWithoutOrderCandidatesInput `json:"orderOrigin"`
}

type OrderOriginUpdateWithoutOrderHotelModifiesDataInput struct {
	HotelId              *string                                              `json:"hotelId,omitempty"`
	HrId                 *string                                              `json:"hrId,omitempty"`
	AdviserId            *string                                              `json:"adviserId,omitempty"`
	Datetime             *int32                                               `json:"datetime,omitempty"`
	Duration             *int32                                               `json:"duration,omitempty"`
	Job                  *string                                              `json:"job,omitempty"`
	Mode                 *int32                                               `json:"mode,omitempty"`
	Count                *int32                                               `json:"count,omitempty"`
	CountMale            *int32                                               `json:"countMale,omitempty"`
	Status               *int32                                               `json:"status,omitempty"`
	OrderAdviserModifies *OrderAdviserModifyUpdateManyWithoutOrderOriginInput `json:"orderAdviserModifies,omitempty"`
	OrderCandidates      *OrderCandidateUpdateManyWithoutOrderOriginInput     `json:"orderCandidates,omitempty"`
}

type RegistrationChannelCreateInput struct {
	OrderId        string                                                 `json:"orderId"`
	Type           int32                                                  `json:"type"`
	InviterId      *string                                                `json:"inviterId,omitempty"`
	OrderCandidate OrderCandidateCreateOneWithoutRegistrationChannelInput `json:"orderCandidate"`
}

type RegistrationChannelUpdateOneRequiredWithoutOrderCandidateInput struct {
	Create  *RegistrationChannelCreateWithoutOrderCandidateInput     `json:"create,omitempty"`
	Update  *RegistrationChannelUpdateWithoutOrderCandidateDataInput `json:"update,omitempty"`
	Upsert  *RegistrationChannelUpsertWithoutOrderCandidateInput     `json:"upsert,omitempty"`
	Connect *RegistrationChannelWhereUniqueInput                     `json:"connect,omitempty"`
}

type RemarkWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type RegistrationChannelUpdateWithoutOrderCandidateDataInput struct {
	OrderId   *string `json:"orderId,omitempty"`
	Type      *int32  `json:"type,omitempty"`
	InviterId *string `json:"inviterId,omitempty"`
}

type OrderOriginCreateInput struct {
	HotelId              string                                               `json:"hotelId"`
	HrId                 string                                               `json:"hrId"`
	AdviserId            string                                               `json:"adviserId"`
	Datetime             int32                                                `json:"datetime"`
	Duration             int32                                                `json:"duration"`
	Job                  string                                               `json:"job"`
	Mode                 int32                                                `json:"mode"`
	Count                int32                                                `json:"count"`
	CountMale            int32                                                `json:"countMale"`
	Status               int32                                                `json:"status"`
	OrderHotelModifies   *OrderHotelModifyCreateManyWithoutOrderOriginInput   `json:"orderHotelModifies,omitempty"`
	OrderAdviserModifies *OrderAdviserModifyCreateManyWithoutOrderOriginInput `json:"orderAdviserModifies,omitempty"`
	OrderCandidates      *OrderCandidateCreateManyWithoutOrderOriginInput     `json:"orderCandidates,omitempty"`
}

type RegistrationChannelUpsertWithoutOrderCandidateInput struct {
	Update RegistrationChannelUpdateWithoutOrderCandidateDataInput `json:"update"`
	Create RegistrationChannelCreateWithoutOrderCandidateInput     `json:"create"`
}

type OrderOriginUpsertWithoutOrderHotelModifiesInput struct {
	Update OrderOriginUpdateWithoutOrderHotelModifiesDataInput `json:"update"`
	Create OrderOriginCreateWithoutOrderHotelModifiesInput     `json:"create"`
}

type OrderCandidateUpsertWithWhereUniqueWithoutOrderOriginInput struct {
	Where  OrderCandidateWhereUniqueInput                  `json:"where"`
	Update OrderCandidateUpdateWithoutOrderOriginDataInput `json:"update"`
	Create OrderCandidateCreateWithoutOrderOriginInput     `json:"create"`
}

type OrderAdviserModifyCreateInput struct {
	Revision     int32                                                `json:"revision"`
	TimeStamp    int32                                                `json:"timeStamp"`
	IsFloat      *int32                                               `json:"isFloat,omitempty"`
	HourlySalary *int32                                               `json:"hourlySalary,omitempty"`
	WorkCount    *string                                              `json:"workCount,omitempty"`
	Attention    *string                                              `json:"attention,omitempty"`
	OrderOrigin  OrderOriginCreateOneWithoutOrderAdviserModifiesInput `json:"orderOrigin"`
}

type RegistrationChannelWhereInput struct {
	ID                     *string                         `json:"id,omitempty"`
	IDNot                  *string                         `json:"id_not,omitempty"`
	IDIn                   []string                        `json:"id_in,omitempty"`
	IDNotIn                []string                        `json:"id_not_in,omitempty"`
	IDLt                   *string                         `json:"id_lt,omitempty"`
	IDLte                  *string                         `json:"id_lte,omitempty"`
	IDGt                   *string                         `json:"id_gt,omitempty"`
	IDGte                  *string                         `json:"id_gte,omitempty"`
	IDContains             *string                         `json:"id_contains,omitempty"`
	IDNotContains          *string                         `json:"id_not_contains,omitempty"`
	IDStartsWith           *string                         `json:"id_starts_with,omitempty"`
	IDNotStartsWith        *string                         `json:"id_not_starts_with,omitempty"`
	IDEndsWith             *string                         `json:"id_ends_with,omitempty"`
	IDNotEndsWith          *string                         `json:"id_not_ends_with,omitempty"`
	OrderId                *string                         `json:"orderId,omitempty"`
	OrderIdNot             *string                         `json:"orderId_not,omitempty"`
	OrderIdIn              []string                        `json:"orderId_in,omitempty"`
	OrderIdNotIn           []string                        `json:"orderId_not_in,omitempty"`
	OrderIdLt              *string                         `json:"orderId_lt,omitempty"`
	OrderIdLte             *string                         `json:"orderId_lte,omitempty"`
	OrderIdGt              *string                         `json:"orderId_gt,omitempty"`
	OrderIdGte             *string                         `json:"orderId_gte,omitempty"`
	OrderIdContains        *string                         `json:"orderId_contains,omitempty"`
	OrderIdNotContains     *string                         `json:"orderId_not_contains,omitempty"`
	OrderIdStartsWith      *string                         `json:"orderId_starts_with,omitempty"`
	OrderIdNotStartsWith   *string                         `json:"orderId_not_starts_with,omitempty"`
	OrderIdEndsWith        *string                         `json:"orderId_ends_with,omitempty"`
	OrderIdNotEndsWith     *string                         `json:"orderId_not_ends_with,omitempty"`
	Type                   *int32                          `json:"type,omitempty"`
	TypeNot                *int32                          `json:"type_not,omitempty"`
	TypeIn                 []int32                         `json:"type_in,omitempty"`
	TypeNotIn              []int32                         `json:"type_not_in,omitempty"`
	TypeLt                 *int32                          `json:"type_lt,omitempty"`
	TypeLte                *int32                          `json:"type_lte,omitempty"`
	TypeGt                 *int32                          `json:"type_gt,omitempty"`
	TypeGte                *int32                          `json:"type_gte,omitempty"`
	InviterId              *string                         `json:"inviterId,omitempty"`
	InviterIdNot           *string                         `json:"inviterId_not,omitempty"`
	InviterIdIn            []string                        `json:"inviterId_in,omitempty"`
	InviterIdNotIn         []string                        `json:"inviterId_not_in,omitempty"`
	InviterIdLt            *string                         `json:"inviterId_lt,omitempty"`
	InviterIdLte           *string                         `json:"inviterId_lte,omitempty"`
	InviterIdGt            *string                         `json:"inviterId_gt,omitempty"`
	InviterIdGte           *string                         `json:"inviterId_gte,omitempty"`
	InviterIdContains      *string                         `json:"inviterId_contains,omitempty"`
	InviterIdNotContains   *string                         `json:"inviterId_not_contains,omitempty"`
	InviterIdStartsWith    *string                         `json:"inviterId_starts_with,omitempty"`
	InviterIdNotStartsWith *string                         `json:"inviterId_not_starts_with,omitempty"`
	InviterIdEndsWith      *string                         `json:"inviterId_ends_with,omitempty"`
	InviterIdNotEndsWith   *string                         `json:"inviterId_not_ends_with,omitempty"`
	OrderCandidate         *OrderCandidateWhereInput       `json:"orderCandidate,omitempty"`
	And                    []RegistrationChannelWhereInput `json:"AND,omitempty"`
	Or                     []RegistrationChannelWhereInput `json:"OR,omitempty"`
	Not                    []RegistrationChannelWhereInput `json:"NOT,omitempty"`
}

type OrderOriginCreateWithoutOrderAdviserModifiesInput struct {
	HotelId            string                                             `json:"hotelId"`
	HrId               string                                             `json:"hrId"`
	AdviserId          string                                             `json:"adviserId"`
	Datetime           int32                                              `json:"datetime"`
	Duration           int32                                              `json:"duration"`
	Job                string                                             `json:"job"`
	Mode               int32                                              `json:"mode"`
	Count              int32                                              `json:"count"`
	CountMale          int32                                              `json:"countMale"`
	Status             int32                                              `json:"status"`
	OrderHotelModifies *OrderHotelModifyCreateManyWithoutOrderOriginInput `json:"orderHotelModifies,omitempty"`
	OrderCandidates    *OrderCandidateCreateManyWithoutOrderOriginInput   `json:"orderCandidates,omitempty"`
}

type OrderOriginUpdateOneRequiredWithoutOrderHotelModifiesInput struct {
	Create  *OrderOriginCreateWithoutOrderHotelModifiesInput     `json:"create,omitempty"`
	Update  *OrderOriginUpdateWithoutOrderHotelModifiesDataInput `json:"update,omitempty"`
	Upsert  *OrderOriginUpsertWithoutOrderHotelModifiesInput     `json:"upsert,omitempty"`
	Connect *OrderOriginWhereUniqueInput                         `json:"connect,omitempty"`
}

type OrderHotelModifyCreateWithoutOrderOriginInput struct {
	Revision  int32  `json:"revision"`
	Timestamp int32  `json:"timestamp"`
	Count     *int32 `json:"count,omitempty"`
	CountMale *int32 `json:"countMale,omitempty"`
	DateTime  *int32 `json:"dateTime,omitempty"`
	Duration  *int32 `json:"duration,omitempty"`
	Mode      *int32 `json:"mode,omitempty"`
}

type OrderOriginWhereInput struct {
	ID                        *string                       `json:"id,omitempty"`
	IDNot                     *string                       `json:"id_not,omitempty"`
	IDIn                      []string                      `json:"id_in,omitempty"`
	IDNotIn                   []string                      `json:"id_not_in,omitempty"`
	IDLt                      *string                       `json:"id_lt,omitempty"`
	IDLte                     *string                       `json:"id_lte,omitempty"`
	IDGt                      *string                       `json:"id_gt,omitempty"`
	IDGte                     *string                       `json:"id_gte,omitempty"`
	IDContains                *string                       `json:"id_contains,omitempty"`
	IDNotContains             *string                       `json:"id_not_contains,omitempty"`
	IDStartsWith              *string                       `json:"id_starts_with,omitempty"`
	IDNotStartsWith           *string                       `json:"id_not_starts_with,omitempty"`
	IDEndsWith                *string                       `json:"id_ends_with,omitempty"`
	IDNotEndsWith             *string                       `json:"id_not_ends_with,omitempty"`
	HotelId                   *string                       `json:"hotelId,omitempty"`
	HotelIdNot                *string                       `json:"hotelId_not,omitempty"`
	HotelIdIn                 []string                      `json:"hotelId_in,omitempty"`
	HotelIdNotIn              []string                      `json:"hotelId_not_in,omitempty"`
	HotelIdLt                 *string                       `json:"hotelId_lt,omitempty"`
	HotelIdLte                *string                       `json:"hotelId_lte,omitempty"`
	HotelIdGt                 *string                       `json:"hotelId_gt,omitempty"`
	HotelIdGte                *string                       `json:"hotelId_gte,omitempty"`
	HotelIdContains           *string                       `json:"hotelId_contains,omitempty"`
	HotelIdNotContains        *string                       `json:"hotelId_not_contains,omitempty"`
	HotelIdStartsWith         *string                       `json:"hotelId_starts_with,omitempty"`
	HotelIdNotStartsWith      *string                       `json:"hotelId_not_starts_with,omitempty"`
	HotelIdEndsWith           *string                       `json:"hotelId_ends_with,omitempty"`
	HotelIdNotEndsWith        *string                       `json:"hotelId_not_ends_with,omitempty"`
	HrId                      *string                       `json:"hrId,omitempty"`
	HrIdNot                   *string                       `json:"hrId_not,omitempty"`
	HrIdIn                    []string                      `json:"hrId_in,omitempty"`
	HrIdNotIn                 []string                      `json:"hrId_not_in,omitempty"`
	HrIdLt                    *string                       `json:"hrId_lt,omitempty"`
	HrIdLte                   *string                       `json:"hrId_lte,omitempty"`
	HrIdGt                    *string                       `json:"hrId_gt,omitempty"`
	HrIdGte                   *string                       `json:"hrId_gte,omitempty"`
	HrIdContains              *string                       `json:"hrId_contains,omitempty"`
	HrIdNotContains           *string                       `json:"hrId_not_contains,omitempty"`
	HrIdStartsWith            *string                       `json:"hrId_starts_with,omitempty"`
	HrIdNotStartsWith         *string                       `json:"hrId_not_starts_with,omitempty"`
	HrIdEndsWith              *string                       `json:"hrId_ends_with,omitempty"`
	HrIdNotEndsWith           *string                       `json:"hrId_not_ends_with,omitempty"`
	AdviserId                 *string                       `json:"adviserId,omitempty"`
	AdviserIdNot              *string                       `json:"adviserId_not,omitempty"`
	AdviserIdIn               []string                      `json:"adviserId_in,omitempty"`
	AdviserIdNotIn            []string                      `json:"adviserId_not_in,omitempty"`
	AdviserIdLt               *string                       `json:"adviserId_lt,omitempty"`
	AdviserIdLte              *string                       `json:"adviserId_lte,omitempty"`
	AdviserIdGt               *string                       `json:"adviserId_gt,omitempty"`
	AdviserIdGte              *string                       `json:"adviserId_gte,omitempty"`
	AdviserIdContains         *string                       `json:"adviserId_contains,omitempty"`
	AdviserIdNotContains      *string                       `json:"adviserId_not_contains,omitempty"`
	AdviserIdStartsWith       *string                       `json:"adviserId_starts_with,omitempty"`
	AdviserIdNotStartsWith    *string                       `json:"adviserId_not_starts_with,omitempty"`
	AdviserIdEndsWith         *string                       `json:"adviserId_ends_with,omitempty"`
	AdviserIdNotEndsWith      *string                       `json:"adviserId_not_ends_with,omitempty"`
	Datetime                  *int32                        `json:"datetime,omitempty"`
	DatetimeNot               *int32                        `json:"datetime_not,omitempty"`
	DatetimeIn                []int32                       `json:"datetime_in,omitempty"`
	DatetimeNotIn             []int32                       `json:"datetime_not_in,omitempty"`
	DatetimeLt                *int32                        `json:"datetime_lt,omitempty"`
	DatetimeLte               *int32                        `json:"datetime_lte,omitempty"`
	DatetimeGt                *int32                        `json:"datetime_gt,omitempty"`
	DatetimeGte               *int32                        `json:"datetime_gte,omitempty"`
	Duration                  *int32                        `json:"duration,omitempty"`
	DurationNot               *int32                        `json:"duration_not,omitempty"`
	DurationIn                []int32                       `json:"duration_in,omitempty"`
	DurationNotIn             []int32                       `json:"duration_not_in,omitempty"`
	DurationLt                *int32                        `json:"duration_lt,omitempty"`
	DurationLte               *int32                        `json:"duration_lte,omitempty"`
	DurationGt                *int32                        `json:"duration_gt,omitempty"`
	DurationGte               *int32                        `json:"duration_gte,omitempty"`
	Job                       *string                       `json:"job,omitempty"`
	JobNot                    *string                       `json:"job_not,omitempty"`
	JobIn                     []string                      `json:"job_in,omitempty"`
	JobNotIn                  []string                      `json:"job_not_in,omitempty"`
	JobLt                     *string                       `json:"job_lt,omitempty"`
	JobLte                    *string                       `json:"job_lte,omitempty"`
	JobGt                     *string                       `json:"job_gt,omitempty"`
	JobGte                    *string                       `json:"job_gte,omitempty"`
	JobContains               *string                       `json:"job_contains,omitempty"`
	JobNotContains            *string                       `json:"job_not_contains,omitempty"`
	JobStartsWith             *string                       `json:"job_starts_with,omitempty"`
	JobNotStartsWith          *string                       `json:"job_not_starts_with,omitempty"`
	JobEndsWith               *string                       `json:"job_ends_with,omitempty"`
	JobNotEndsWith            *string                       `json:"job_not_ends_with,omitempty"`
	Mode                      *int32                        `json:"mode,omitempty"`
	ModeNot                   *int32                        `json:"mode_not,omitempty"`
	ModeIn                    []int32                       `json:"mode_in,omitempty"`
	ModeNotIn                 []int32                       `json:"mode_not_in,omitempty"`
	ModeLt                    *int32                        `json:"mode_lt,omitempty"`
	ModeLte                   *int32                        `json:"mode_lte,omitempty"`
	ModeGt                    *int32                        `json:"mode_gt,omitempty"`
	ModeGte                   *int32                        `json:"mode_gte,omitempty"`
	Count                     *int32                        `json:"count,omitempty"`
	CountNot                  *int32                        `json:"count_not,omitempty"`
	CountIn                   []int32                       `json:"count_in,omitempty"`
	CountNotIn                []int32                       `json:"count_not_in,omitempty"`
	CountLt                   *int32                        `json:"count_lt,omitempty"`
	CountLte                  *int32                        `json:"count_lte,omitempty"`
	CountGt                   *int32                        `json:"count_gt,omitempty"`
	CountGte                  *int32                        `json:"count_gte,omitempty"`
	CountMale                 *int32                        `json:"countMale,omitempty"`
	CountMaleNot              *int32                        `json:"countMale_not,omitempty"`
	CountMaleIn               []int32                       `json:"countMale_in,omitempty"`
	CountMaleNotIn            []int32                       `json:"countMale_not_in,omitempty"`
	CountMaleLt               *int32                        `json:"countMale_lt,omitempty"`
	CountMaleLte              *int32                        `json:"countMale_lte,omitempty"`
	CountMaleGt               *int32                        `json:"countMale_gt,omitempty"`
	CountMaleGte              *int32                        `json:"countMale_gte,omitempty"`
	Status                    *int32                        `json:"status,omitempty"`
	StatusNot                 *int32                        `json:"status_not,omitempty"`
	StatusIn                  []int32                       `json:"status_in,omitempty"`
	StatusNotIn               []int32                       `json:"status_not_in,omitempty"`
	StatusLt                  *int32                        `json:"status_lt,omitempty"`
	StatusLte                 *int32                        `json:"status_lte,omitempty"`
	StatusGt                  *int32                        `json:"status_gt,omitempty"`
	StatusGte                 *int32                        `json:"status_gte,omitempty"`
	OrderHotelModifiesEvery   *OrderHotelModifyWhereInput   `json:"orderHotelModifies_every,omitempty"`
	OrderHotelModifiesSome    *OrderHotelModifyWhereInput   `json:"orderHotelModifies_some,omitempty"`
	OrderHotelModifiesNone    *OrderHotelModifyWhereInput   `json:"orderHotelModifies_none,omitempty"`
	OrderAdviserModifiesEvery *OrderAdviserModifyWhereInput `json:"orderAdviserModifies_every,omitempty"`
	OrderAdviserModifiesSome  *OrderAdviserModifyWhereInput `json:"orderAdviserModifies_some,omitempty"`
	OrderAdviserModifiesNone  *OrderAdviserModifyWhereInput `json:"orderAdviserModifies_none,omitempty"`
	OrderCandidatesEvery      *OrderCandidateWhereInput     `json:"orderCandidates_every,omitempty"`
	OrderCandidatesSome       *OrderCandidateWhereInput     `json:"orderCandidates_some,omitempty"`
	OrderCandidatesNone       *OrderCandidateWhereInput     `json:"orderCandidates_none,omitempty"`
	And                       []OrderOriginWhereInput       `json:"AND,omitempty"`
	Or                        []OrderOriginWhereInput       `json:"OR,omitempty"`
	Not                       []OrderOriginWhereInput       `json:"NOT,omitempty"`
}

type OrderCandidateCreateWithoutOrderOriginInput struct {
	AdviserId           string                                                 `json:"adviserId"`
	AgentId             string                                                 `json:"agentId"`
	PtId                string                                                 `json:"ptId"`
	ApplyTime           *int32                                                 `json:"applyTime,omitempty"`
	SignInTime          *int32                                                 `json:"signInTime,omitempty"`
	PtStatus            int32                                                  `json:"ptStatus"`
	PtPerformance       *int32                                                 `json:"ptPerformance,omitempty"`
	ObjectReason        *int32                                                 `json:"objectReason,omitempty"`
	Remark              *RemarkCreateOneWithoutOrderCandidateInput             `json:"remark,omitempty"`
	RegistrationChannel RegistrationChannelCreateOneWithoutOrderCandidateInput `json:"registrationChannel"`
}

type OrderHotelModifyUpdateInput struct {
	Revision    *int32                                                      `json:"revision,omitempty"`
	Timestamp   *int32                                                      `json:"timestamp,omitempty"`
	Count       *int32                                                      `json:"count,omitempty"`
	CountMale   *int32                                                      `json:"countMale,omitempty"`
	DateTime    *int32                                                      `json:"dateTime,omitempty"`
	Duration    *int32                                                      `json:"duration,omitempty"`
	Mode        *int32                                                      `json:"mode,omitempty"`
	OrderOrigin *OrderOriginUpdateOneRequiredWithoutOrderHotelModifiesInput `json:"orderOrigin,omitempty"`
}

type RemarkCreateWithoutOrderCandidateInput struct {
	PtId       string `json:"ptId"`
	StartDate  *int32 `json:"startDate,omitempty"`
	EndDate    *int32 `json:"endDate,omitempty"`
	RealSalary *int32 `json:"realSalary,omitempty"`
	IsWorked   int32  `json:"isWorked"`
}

type OrderAdviserModifyUpdateManyMutationInput struct {
	Revision     *int32  `json:"revision,omitempty"`
	TimeStamp    *int32  `json:"timeStamp,omitempty"`
	IsFloat      *int32  `json:"isFloat,omitempty"`
	HourlySalary *int32  `json:"hourlySalary,omitempty"`
	WorkCount    *string `json:"workCount,omitempty"`
	Attention    *string `json:"attention,omitempty"`
}

type RemarkSubscriptionWhereInput struct {
	MutationIn                 []MutationType                 `json:"mutation_in,omitempty"`
	UpdatedFieldsContains      *string                        `json:"updatedFields_contains,omitempty"`
	UpdatedFieldsContainsEvery []string                       `json:"updatedFields_contains_every,omitempty"`
	UpdatedFieldsContainsSome  []string                       `json:"updatedFields_contains_some,omitempty"`
	Node                       *RemarkWhereInput              `json:"node,omitempty"`
	And                        []RemarkSubscriptionWhereInput `json:"AND,omitempty"`
	Or                         []RemarkSubscriptionWhereInput `json:"OR,omitempty"`
	Not                        []RemarkSubscriptionWhereInput `json:"NOT,omitempty"`
}

type OrderOriginCreateWithoutOrderHotelModifiesInput struct {
	HotelId              string                                               `json:"hotelId"`
	HrId                 string                                               `json:"hrId"`
	AdviserId            string                                               `json:"adviserId"`
	Datetime             int32                                                `json:"datetime"`
	Duration             int32                                                `json:"duration"`
	Job                  string                                               `json:"job"`
	Mode                 int32                                                `json:"mode"`
	Count                int32                                                `json:"count"`
	CountMale            int32                                                `json:"countMale"`
	Status               int32                                                `json:"status"`
	OrderAdviserModifies *OrderAdviserModifyCreateManyWithoutOrderOriginInput `json:"orderAdviserModifies,omitempty"`
	OrderCandidates      *OrderCandidateCreateManyWithoutOrderOriginInput     `json:"orderCandidates,omitempty"`
}

type OrderCandidateSubscriptionWhereInput struct {
	MutationIn                 []MutationType                         `json:"mutation_in,omitempty"`
	UpdatedFieldsContains      *string                                `json:"updatedFields_contains,omitempty"`
	UpdatedFieldsContainsEvery []string                               `json:"updatedFields_contains_every,omitempty"`
	UpdatedFieldsContainsSome  []string                               `json:"updatedFields_contains_some,omitempty"`
	Node                       *OrderCandidateWhereInput              `json:"node,omitempty"`
	And                        []OrderCandidateSubscriptionWhereInput `json:"AND,omitempty"`
	Or                         []OrderCandidateSubscriptionWhereInput `json:"OR,omitempty"`
	Not                        []OrderCandidateSubscriptionWhereInput `json:"NOT,omitempty"`
}

type OrderOriginCreateOneWithoutOrderHotelModifiesInput struct {
	Create  *OrderOriginCreateWithoutOrderHotelModifiesInput `json:"create,omitempty"`
	Connect *OrderOriginWhereUniqueInput                     `json:"connect,omitempty"`
}

type OrderAgentWhereInput struct {
	ID                   *string                `json:"id,omitempty"`
	IDNot                *string                `json:"id_not,omitempty"`
	IDIn                 []string               `json:"id_in,omitempty"`
	IDNotIn              []string               `json:"id_not_in,omitempty"`
	IDLt                 *string                `json:"id_lt,omitempty"`
	IDLte                *string                `json:"id_lte,omitempty"`
	IDGt                 *string                `json:"id_gt,omitempty"`
	IDGte                *string                `json:"id_gte,omitempty"`
	IDContains           *string                `json:"id_contains,omitempty"`
	IDNotContains        *string                `json:"id_not_contains,omitempty"`
	IDStartsWith         *string                `json:"id_starts_with,omitempty"`
	IDNotStartsWith      *string                `json:"id_not_starts_with,omitempty"`
	IDEndsWith           *string                `json:"id_ends_with,omitempty"`
	IDNotEndsWith        *string                `json:"id_not_ends_with,omitempty"`
	OrderId              *string                `json:"orderId,omitempty"`
	OrderIdNot           *string                `json:"orderId_not,omitempty"`
	OrderIdIn            []string               `json:"orderId_in,omitempty"`
	OrderIdNotIn         []string               `json:"orderId_not_in,omitempty"`
	OrderIdLt            *string                `json:"orderId_lt,omitempty"`
	OrderIdLte           *string                `json:"orderId_lte,omitempty"`
	OrderIdGt            *string                `json:"orderId_gt,omitempty"`
	OrderIdGte           *string                `json:"orderId_gte,omitempty"`
	OrderIdContains      *string                `json:"orderId_contains,omitempty"`
	OrderIdNotContains   *string                `json:"orderId_not_contains,omitempty"`
	OrderIdStartsWith    *string                `json:"orderId_starts_with,omitempty"`
	OrderIdNotStartsWith *string                `json:"orderId_not_starts_with,omitempty"`
	OrderIdEndsWith      *string                `json:"orderId_ends_with,omitempty"`
	OrderIdNotEndsWith   *string                `json:"orderId_not_ends_with,omitempty"`
	AgentId              *string                `json:"agentId,omitempty"`
	AgentIdNot           *string                `json:"agentId_not,omitempty"`
	AgentIdIn            []string               `json:"agentId_in,omitempty"`
	AgentIdNotIn         []string               `json:"agentId_not_in,omitempty"`
	AgentIdLt            *string                `json:"agentId_lt,omitempty"`
	AgentIdLte           *string                `json:"agentId_lte,omitempty"`
	AgentIdGt            *string                `json:"agentId_gt,omitempty"`
	AgentIdGte           *string                `json:"agentId_gte,omitempty"`
	AgentIdContains      *string                `json:"agentId_contains,omitempty"`
	AgentIdNotContains   *string                `json:"agentId_not_contains,omitempty"`
	AgentIdStartsWith    *string                `json:"agentId_starts_with,omitempty"`
	AgentIdNotStartsWith *string                `json:"agentId_not_starts_with,omitempty"`
	AgentIdEndsWith      *string                `json:"agentId_ends_with,omitempty"`
	AgentIdNotEndsWith   *string                `json:"agentId_not_ends_with,omitempty"`
	And                  []OrderAgentWhereInput `json:"AND,omitempty"`
	Or                   []OrderAgentWhereInput `json:"OR,omitempty"`
	Not                  []OrderAgentWhereInput `json:"NOT,omitempty"`
}

type OrderAgentCreateInput struct {
	OrderId string `json:"orderId"`
	AgentId string `json:"agentId"`
}

type OrderCandidateUpdateWithoutRemarkDataInput struct {
	AdviserId           *string                                                         `json:"adviserId,omitempty"`
	AgentId             *string                                                         `json:"agentId,omitempty"`
	PtId                *string                                                         `json:"ptId,omitempty"`
	ApplyTime           *int32                                                          `json:"applyTime,omitempty"`
	SignInTime          *int32                                                          `json:"signInTime,omitempty"`
	PtStatus            *int32                                                          `json:"ptStatus,omitempty"`
	PtPerformance       *int32                                                          `json:"ptPerformance,omitempty"`
	ObjectReason        *int32                                                          `json:"objectReason,omitempty"`
	RegistrationChannel *RegistrationChannelUpdateOneRequiredWithoutOrderCandidateInput `json:"registrationChannel,omitempty"`
	OrderOrigin         *OrderOriginUpdateOneRequiredWithoutOrderCandidatesInput        `json:"orderOrigin,omitempty"`
}

type OrderAgentUpdateInput struct {
	OrderId *string `json:"orderId,omitempty"`
	AgentId *string `json:"agentId,omitempty"`
}

type OrderCandidateCreateWithoutRemarkInput struct {
	AdviserId           string                                                 `json:"adviserId"`
	AgentId             string                                                 `json:"agentId"`
	PtId                string                                                 `json:"ptId"`
	ApplyTime           *int32                                                 `json:"applyTime,omitempty"`
	SignInTime          *int32                                                 `json:"signInTime,omitempty"`
	PtStatus            int32                                                  `json:"ptStatus"`
	PtPerformance       *int32                                                 `json:"ptPerformance,omitempty"`
	ObjectReason        *int32                                                 `json:"objectReason,omitempty"`
	RegistrationChannel RegistrationChannelCreateOneWithoutOrderCandidateInput `json:"registrationChannel"`
	OrderOrigin         OrderOriginCreateOneWithoutOrderCandidatesInput        `json:"orderOrigin"`
}

type OrderAgentUpdateManyMutationInput struct {
	OrderId *string `json:"orderId,omitempty"`
	AgentId *string `json:"agentId,omitempty"`
}

type RegistrationChannelUpdateManyMutationInput struct {
	OrderId   *string `json:"orderId,omitempty"`
	Type      *int32  `json:"type,omitempty"`
	InviterId *string `json:"inviterId,omitempty"`
}

type OrderCandidateCreateInput struct {
	AdviserId           string                                                 `json:"adviserId"`
	AgentId             string                                                 `json:"agentId"`
	PtId                string                                                 `json:"ptId"`
	ApplyTime           *int32                                                 `json:"applyTime,omitempty"`
	SignInTime          *int32                                                 `json:"signInTime,omitempty"`
	PtStatus            int32                                                  `json:"ptStatus"`
	PtPerformance       *int32                                                 `json:"ptPerformance,omitempty"`
	ObjectReason        *int32                                                 `json:"objectReason,omitempty"`
	Remark              *RemarkCreateOneWithoutOrderCandidateInput             `json:"remark,omitempty"`
	RegistrationChannel RegistrationChannelCreateOneWithoutOrderCandidateInput `json:"registrationChannel"`
	OrderOrigin         OrderOriginCreateOneWithoutOrderCandidatesInput        `json:"orderOrigin"`
}

type OrderCandidateUpdateOneRequiredWithoutRegistrationChannelInput struct {
	Create  *OrderCandidateCreateWithoutRegistrationChannelInput     `json:"create,omitempty"`
	Update  *OrderCandidateUpdateWithoutRegistrationChannelDataInput `json:"update,omitempty"`
	Upsert  *OrderCandidateUpsertWithoutRegistrationChannelInput     `json:"upsert,omitempty"`
	Connect *OrderCandidateWhereUniqueInput                          `json:"connect,omitempty"`
}

type OrderOriginCreateOneWithoutOrderCandidatesInput struct {
	Create  *OrderOriginCreateWithoutOrderCandidatesInput `json:"create,omitempty"`
	Connect *OrderOriginWhereUniqueInput                  `json:"connect,omitempty"`
}

type OrderCandidateCreateOneWithoutRegistrationChannelInput struct {
	Create  *OrderCandidateCreateWithoutRegistrationChannelInput `json:"create,omitempty"`
	Connect *OrderCandidateWhereUniqueInput                      `json:"connect,omitempty"`
}

type OrderOriginCreateWithoutOrderCandidatesInput struct {
	HotelId              string                                               `json:"hotelId"`
	HrId                 string                                               `json:"hrId"`
	AdviserId            string                                               `json:"adviserId"`
	Datetime             int32                                                `json:"datetime"`
	Duration             int32                                                `json:"duration"`
	Job                  string                                               `json:"job"`
	Mode                 int32                                                `json:"mode"`
	Count                int32                                                `json:"count"`
	CountMale            int32                                                `json:"countMale"`
	Status               int32                                                `json:"status"`
	OrderHotelModifies   *OrderHotelModifyCreateManyWithoutOrderOriginInput   `json:"orderHotelModifies,omitempty"`
	OrderAdviserModifies *OrderAdviserModifyCreateManyWithoutOrderOriginInput `json:"orderAdviserModifies,omitempty"`
}

type OrderOriginUpdateInput struct {
	HotelId              *string                                              `json:"hotelId,omitempty"`
	HrId                 *string                                              `json:"hrId,omitempty"`
	AdviserId            *string                                              `json:"adviserId,omitempty"`
	Datetime             *int32                                               `json:"datetime,omitempty"`
	Duration             *int32                                               `json:"duration,omitempty"`
	Job                  *string                                              `json:"job,omitempty"`
	Mode                 *int32                                               `json:"mode,omitempty"`
	Count                *int32                                               `json:"count,omitempty"`
	CountMale            *int32                                               `json:"countMale,omitempty"`
	Status               *int32                                               `json:"status,omitempty"`
	OrderHotelModifies   *OrderHotelModifyUpdateManyWithoutOrderOriginInput   `json:"orderHotelModifies,omitempty"`
	OrderAdviserModifies *OrderAdviserModifyUpdateManyWithoutOrderOriginInput `json:"orderAdviserModifies,omitempty"`
	OrderCandidates      *OrderCandidateUpdateManyWithoutOrderOriginInput     `json:"orderCandidates,omitempty"`
}

type OrderAdviserModifyCreateManyWithoutOrderOriginInput struct {
	Create  []OrderAdviserModifyCreateWithoutOrderOriginInput `json:"create,omitempty"`
	Connect []OrderAdviserModifyWhereUniqueInput              `json:"connect,omitempty"`
}

type OrderHotelModifyCreateManyWithoutOrderOriginInput struct {
	Create  []OrderHotelModifyCreateWithoutOrderOriginInput `json:"create,omitempty"`
	Connect []OrderHotelModifyWhereUniqueInput              `json:"connect,omitempty"`
}

type OrderAdviserModifyCreateWithoutOrderOriginInput struct {
	Revision     int32   `json:"revision"`
	TimeStamp    int32   `json:"timeStamp"`
	IsFloat      *int32  `json:"isFloat,omitempty"`
	HourlySalary *int32  `json:"hourlySalary,omitempty"`
	WorkCount    *string `json:"workCount,omitempty"`
	Attention    *string `json:"attention,omitempty"`
}

type RemarkCreateOneWithoutOrderCandidateInput struct {
	Create  *RemarkCreateWithoutOrderCandidateInput `json:"create,omitempty"`
	Connect *RemarkWhereUniqueInput                 `json:"connect,omitempty"`
}

type OrderCandidateUpdateInput struct {
	AdviserId           *string                                                         `json:"adviserId,omitempty"`
	AgentId             *string                                                         `json:"agentId,omitempty"`
	PtId                *string                                                         `json:"ptId,omitempty"`
	ApplyTime           *int32                                                          `json:"applyTime,omitempty"`
	SignInTime          *int32                                                          `json:"signInTime,omitempty"`
	PtStatus            *int32                                                          `json:"ptStatus,omitempty"`
	PtPerformance       *int32                                                          `json:"ptPerformance,omitempty"`
	ObjectReason        *int32                                                          `json:"objectReason,omitempty"`
	Remark              *RemarkUpdateOneWithoutOrderCandidateInput                      `json:"remark,omitempty"`
	RegistrationChannel *RegistrationChannelUpdateOneRequiredWithoutOrderCandidateInput `json:"registrationChannel,omitempty"`
	OrderOrigin         *OrderOriginUpdateOneRequiredWithoutOrderCandidatesInput        `json:"orderOrigin,omitempty"`
}

type OrderOriginSubscriptionWhereInput struct {
	MutationIn                 []MutationType                      `json:"mutation_in,omitempty"`
	UpdatedFieldsContains      *string                             `json:"updatedFields_contains,omitempty"`
	UpdatedFieldsContainsEvery []string                            `json:"updatedFields_contains_every,omitempty"`
	UpdatedFieldsContainsSome  []string                            `json:"updatedFields_contains_some,omitempty"`
	Node                       *OrderOriginWhereInput              `json:"node,omitempty"`
	And                        []OrderOriginSubscriptionWhereInput `json:"AND,omitempty"`
	Or                         []OrderOriginSubscriptionWhereInput `json:"OR,omitempty"`
	Not                        []OrderOriginSubscriptionWhereInput `json:"NOT,omitempty"`
}

type OrderOriginUpdateOneRequiredWithoutOrderCandidatesInput struct {
	Create  *OrderOriginCreateWithoutOrderCandidatesInput     `json:"create,omitempty"`
	Update  *OrderOriginUpdateWithoutOrderCandidatesDataInput `json:"update,omitempty"`
	Upsert  *OrderOriginUpsertWithoutOrderCandidatesInput     `json:"upsert,omitempty"`
	Connect *OrderOriginWhereUniqueInput                      `json:"connect,omitempty"`
}

type RemarkUpdateManyMutationInput struct {
	PtId       *string `json:"ptId,omitempty"`
	StartDate  *int32  `json:"startDate,omitempty"`
	EndDate    *int32  `json:"endDate,omitempty"`
	RealSalary *int32  `json:"realSalary,omitempty"`
	IsWorked   *int32  `json:"isWorked,omitempty"`
}

type OrderOriginUpdateWithoutOrderCandidatesDataInput struct {
	HotelId              *string                                              `json:"hotelId,omitempty"`
	HrId                 *string                                              `json:"hrId,omitempty"`
	AdviserId            *string                                              `json:"adviserId,omitempty"`
	Datetime             *int32                                               `json:"datetime,omitempty"`
	Duration             *int32                                               `json:"duration,omitempty"`
	Job                  *string                                              `json:"job,omitempty"`
	Mode                 *int32                                               `json:"mode,omitempty"`
	Count                *int32                                               `json:"count,omitempty"`
	CountMale            *int32                                               `json:"countMale,omitempty"`
	Status               *int32                                               `json:"status,omitempty"`
	OrderHotelModifies   *OrderHotelModifyUpdateManyWithoutOrderOriginInput   `json:"orderHotelModifies,omitempty"`
	OrderAdviserModifies *OrderAdviserModifyUpdateManyWithoutOrderOriginInput `json:"orderAdviserModifies,omitempty"`
}

type OrderCandidateCreateOneWithoutRemarkInput struct {
	Create  *OrderCandidateCreateWithoutRemarkInput `json:"create,omitempty"`
	Connect *OrderCandidateWhereUniqueInput         `json:"connect,omitempty"`
}

type OrderAdviserModifyUpdateManyWithoutOrderOriginInput struct {
	Create     []OrderAdviserModifyCreateWithoutOrderOriginInput                `json:"create,omitempty"`
	Delete     []OrderAdviserModifyWhereUniqueInput                             `json:"delete,omitempty"`
	Connect    []OrderAdviserModifyWhereUniqueInput                             `json:"connect,omitempty"`
	Set        []OrderAdviserModifyWhereUniqueInput                             `json:"set,omitempty"`
	Disconnect []OrderAdviserModifyWhereUniqueInput                             `json:"disconnect,omitempty"`
	Update     []OrderAdviserModifyUpdateWithWhereUniqueWithoutOrderOriginInput `json:"update,omitempty"`
	Upsert     []OrderAdviserModifyUpsertWithWhereUniqueWithoutOrderOriginInput `json:"upsert,omitempty"`
	DeleteMany []OrderAdviserModifyScalarWhereInput                             `json:"deleteMany,omitempty"`
	UpdateMany []OrderAdviserModifyUpdateManyWithWhereNestedInput               `json:"updateMany,omitempty"`
}

type RegistrationChannelWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type OrderAdviserModifyUpdateWithWhereUniqueWithoutOrderOriginInput struct {
	Where OrderAdviserModifyWhereUniqueInput                  `json:"where"`
	Data  OrderAdviserModifyUpdateWithoutOrderOriginDataInput `json:"data"`
}

type OrderHotelModifyUpdateManyMutationInput struct {
	Revision  *int32 `json:"revision,omitempty"`
	Timestamp *int32 `json:"timestamp,omitempty"`
	Count     *int32 `json:"count,omitempty"`
	CountMale *int32 `json:"countMale,omitempty"`
	DateTime  *int32 `json:"dateTime,omitempty"`
	Duration  *int32 `json:"duration,omitempty"`
	Mode      *int32 `json:"mode,omitempty"`
}

type OrderAdviserModifyUpdateWithoutOrderOriginDataInput struct {
	Revision     *int32  `json:"revision,omitempty"`
	TimeStamp    *int32  `json:"timeStamp,omitempty"`
	IsFloat      *int32  `json:"isFloat,omitempty"`
	HourlySalary *int32  `json:"hourlySalary,omitempty"`
	WorkCount    *string `json:"workCount,omitempty"`
	Attention    *string `json:"attention,omitempty"`
}

type OrderCandidateCreateManyWithoutOrderOriginInput struct {
	Create  []OrderCandidateCreateWithoutOrderOriginInput `json:"create,omitempty"`
	Connect []OrderCandidateWhereUniqueInput              `json:"connect,omitempty"`
}

type OrderAdviserModifyUpsertWithWhereUniqueWithoutOrderOriginInput struct {
	Where  OrderAdviserModifyWhereUniqueInput                  `json:"where"`
	Update OrderAdviserModifyUpdateWithoutOrderOriginDataInput `json:"update"`
	Create OrderAdviserModifyCreateWithoutOrderOriginInput     `json:"create"`
}

type OrderAgentWhereUniqueInput struct {
	ID *string `json:"id,omitempty"`
}

type OrderAdviserModifyScalarWhereInput struct {
	ID                     *string                              `json:"id,omitempty"`
	IDNot                  *string                              `json:"id_not,omitempty"`
	IDIn                   []string                             `json:"id_in,omitempty"`
	IDNotIn                []string                             `json:"id_not_in,omitempty"`
	IDLt                   *string                              `json:"id_lt,omitempty"`
	IDLte                  *string                              `json:"id_lte,omitempty"`
	IDGt                   *string                              `json:"id_gt,omitempty"`
	IDGte                  *string                              `json:"id_gte,omitempty"`
	IDContains             *string                              `json:"id_contains,omitempty"`
	IDNotContains          *string                              `json:"id_not_contains,omitempty"`
	IDStartsWith           *string                              `json:"id_starts_with,omitempty"`
	IDNotStartsWith        *string                              `json:"id_not_starts_with,omitempty"`
	IDEndsWith             *string                              `json:"id_ends_with,omitempty"`
	IDNotEndsWith          *string                              `json:"id_not_ends_with,omitempty"`
	Revision               *int32                               `json:"revision,omitempty"`
	RevisionNot            *int32                               `json:"revision_not,omitempty"`
	RevisionIn             []int32                              `json:"revision_in,omitempty"`
	RevisionNotIn          []int32                              `json:"revision_not_in,omitempty"`
	RevisionLt             *int32                               `json:"revision_lt,omitempty"`
	RevisionLte            *int32                               `json:"revision_lte,omitempty"`
	RevisionGt             *int32                               `json:"revision_gt,omitempty"`
	RevisionGte            *int32                               `json:"revision_gte,omitempty"`
	TimeStamp              *int32                               `json:"timeStamp,omitempty"`
	TimeStampNot           *int32                               `json:"timeStamp_not,omitempty"`
	TimeStampIn            []int32                              `json:"timeStamp_in,omitempty"`
	TimeStampNotIn         []int32                              `json:"timeStamp_not_in,omitempty"`
	TimeStampLt            *int32                               `json:"timeStamp_lt,omitempty"`
	TimeStampLte           *int32                               `json:"timeStamp_lte,omitempty"`
	TimeStampGt            *int32                               `json:"timeStamp_gt,omitempty"`
	TimeStampGte           *int32                               `json:"timeStamp_gte,omitempty"`
	IsFloat                *int32                               `json:"isFloat,omitempty"`
	IsFloatNot             *int32                               `json:"isFloat_not,omitempty"`
	IsFloatIn              []int32                              `json:"isFloat_in,omitempty"`
	IsFloatNotIn           []int32                              `json:"isFloat_not_in,omitempty"`
	IsFloatLt              *int32                               `json:"isFloat_lt,omitempty"`
	IsFloatLte             *int32                               `json:"isFloat_lte,omitempty"`
	IsFloatGt              *int32                               `json:"isFloat_gt,omitempty"`
	IsFloatGte             *int32                               `json:"isFloat_gte,omitempty"`
	HourlySalary           *int32                               `json:"hourlySalary,omitempty"`
	HourlySalaryNot        *int32                               `json:"hourlySalary_not,omitempty"`
	HourlySalaryIn         []int32                              `json:"hourlySalary_in,omitempty"`
	HourlySalaryNotIn      []int32                              `json:"hourlySalary_not_in,omitempty"`
	HourlySalaryLt         *int32                               `json:"hourlySalary_lt,omitempty"`
	HourlySalaryLte        *int32                               `json:"hourlySalary_lte,omitempty"`
	HourlySalaryGt         *int32                               `json:"hourlySalary_gt,omitempty"`
	HourlySalaryGte        *int32                               `json:"hourlySalary_gte,omitempty"`
	WorkCount              *string                              `json:"workCount,omitempty"`
	WorkCountNot           *string                              `json:"workCount_not,omitempty"`
	WorkCountIn            []string                             `json:"workCount_in,omitempty"`
	WorkCountNotIn         []string                             `json:"workCount_not_in,omitempty"`
	WorkCountLt            *string                              `json:"workCount_lt,omitempty"`
	WorkCountLte           *string                              `json:"workCount_lte,omitempty"`
	WorkCountGt            *string                              `json:"workCount_gt,omitempty"`
	WorkCountGte           *string                              `json:"workCount_gte,omitempty"`
	WorkCountContains      *string                              `json:"workCount_contains,omitempty"`
	WorkCountNotContains   *string                              `json:"workCount_not_contains,omitempty"`
	WorkCountStartsWith    *string                              `json:"workCount_starts_with,omitempty"`
	WorkCountNotStartsWith *string                              `json:"workCount_not_starts_with,omitempty"`
	WorkCountEndsWith      *string                              `json:"workCount_ends_with,omitempty"`
	WorkCountNotEndsWith   *string                              `json:"workCount_not_ends_with,omitempty"`
	Attention              *string                              `json:"attention,omitempty"`
	AttentionNot           *string                              `json:"attention_not,omitempty"`
	AttentionIn            []string                             `json:"attention_in,omitempty"`
	AttentionNotIn         []string                             `json:"attention_not_in,omitempty"`
	AttentionLt            *string                              `json:"attention_lt,omitempty"`
	AttentionLte           *string                              `json:"attention_lte,omitempty"`
	AttentionGt            *string                              `json:"attention_gt,omitempty"`
	AttentionGte           *string                              `json:"attention_gte,omitempty"`
	AttentionContains      *string                              `json:"attention_contains,omitempty"`
	AttentionNotContains   *string                              `json:"attention_not_contains,omitempty"`
	AttentionStartsWith    *string                              `json:"attention_starts_with,omitempty"`
	AttentionNotStartsWith *string                              `json:"attention_not_starts_with,omitempty"`
	AttentionEndsWith      *string                              `json:"attention_ends_with,omitempty"`
	AttentionNotEndsWith   *string                              `json:"attention_not_ends_with,omitempty"`
	And                    []OrderAdviserModifyScalarWhereInput `json:"AND,omitempty"`
	Or                     []OrderAdviserModifyScalarWhereInput `json:"OR,omitempty"`
	Not                    []OrderAdviserModifyScalarWhereInput `json:"NOT,omitempty"`
}

type OrderCandidateUpsertWithoutRegistrationChannelInput struct {
	Update OrderCandidateUpdateWithoutRegistrationChannelDataInput `json:"update"`
	Create OrderCandidateCreateWithoutRegistrationChannelInput     `json:"create"`
}

type OrderCandidateUpdateManyMutationInput struct {
	AdviserId     *string `json:"adviserId,omitempty"`
	AgentId       *string `json:"agentId,omitempty"`
	PtId          *string `json:"ptId,omitempty"`
	ApplyTime     *int32  `json:"applyTime,omitempty"`
	SignInTime    *int32  `json:"signInTime,omitempty"`
	PtStatus      *int32  `json:"ptStatus,omitempty"`
	PtPerformance *int32  `json:"ptPerformance,omitempty"`
	ObjectReason  *int32  `json:"objectReason,omitempty"`
}

type OrderOriginUpsertWithoutOrderCandidatesInput struct {
	Update OrderOriginUpdateWithoutOrderCandidatesDataInput `json:"update"`
	Create OrderOriginCreateWithoutOrderCandidatesInput     `json:"create"`
}

type OrderAdviserModifyUpdateManyDataInput struct {
	Revision     *int32  `json:"revision,omitempty"`
	TimeStamp    *int32  `json:"timeStamp,omitempty"`
	IsFloat      *int32  `json:"isFloat,omitempty"`
	HourlySalary *int32  `json:"hourlySalary,omitempty"`
	WorkCount    *string `json:"workCount,omitempty"`
	Attention    *string `json:"attention,omitempty"`
}

type OrderAdviserModifyUpdateManyWithWhereNestedInput struct {
	Where OrderAdviserModifyScalarWhereInput    `json:"where"`
	Data  OrderAdviserModifyUpdateManyDataInput `json:"data"`
}

type OrderOriginUpdateManyMutationInput struct {
	HotelId   *string `json:"hotelId,omitempty"`
	HrId      *string `json:"hrId,omitempty"`
	AdviserId *string `json:"adviserId,omitempty"`
	Datetime  *int32  `json:"datetime,omitempty"`
	Duration  *int32  `json:"duration,omitempty"`
	Job       *string `json:"job,omitempty"`
	Mode      *int32  `json:"mode,omitempty"`
	Count     *int32  `json:"count,omitempty"`
	CountMale *int32  `json:"countMale,omitempty"`
	Status    *int32  `json:"status,omitempty"`
}

type OrderCandidateUpdateOneRequiredWithoutRemarkInput struct {
	Create  *OrderCandidateCreateWithoutRemarkInput     `json:"create,omitempty"`
	Update  *OrderCandidateUpdateWithoutRemarkDataInput `json:"update,omitempty"`
	Upsert  *OrderCandidateUpsertWithoutRemarkInput     `json:"upsert,omitempty"`
	Connect *OrderCandidateWhereUniqueInput             `json:"connect,omitempty"`
}

type RegistrationChannelCreateOneWithoutOrderCandidateInput struct {
	Create  *RegistrationChannelCreateWithoutOrderCandidateInput `json:"create,omitempty"`
	Connect *RegistrationChannelWhereUniqueInput                 `json:"connect,omitempty"`
}

type OrderOriginCreateOneWithoutOrderAdviserModifiesInput struct {
	Create  *OrderOriginCreateWithoutOrderAdviserModifiesInput `json:"create,omitempty"`
	Connect *OrderOriginWhereUniqueInput                       `json:"connect,omitempty"`
}

type RemarkPreviousValuesExec struct {
	exec *prisma.Exec
}

func (instance RemarkPreviousValuesExec) Exec(ctx context.Context) (*RemarkPreviousValues, error) {
	var v RemarkPreviousValues
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance RemarkPreviousValuesExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type RemarkPreviousValuesExecArray struct {
	exec *prisma.Exec
}

func (instance RemarkPreviousValuesExecArray) Exec(ctx context.Context) ([]RemarkPreviousValues, error) {
	var v []RemarkPreviousValues
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type RemarkPreviousValues struct {
	ID         string `json:"id"`
	PtId       string `json:"ptId"`
	StartDate  *int32 `json:"startDate,omitempty"`
	EndDate    *int32 `json:"endDate,omitempty"`
	RealSalary *int32 `json:"realSalary,omitempty"`
	IsWorked   int32  `json:"isWorked"`
}

type OrderAgentEdgeExec struct {
	exec *prisma.Exec
}

func (instance *OrderAgentEdgeExec) Node() *OrderAgentExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "OrderAgent"},
		"node",
		[]string{"id", "orderId", "agentId"})

	return &OrderAgentExec{ret}
}

func (instance OrderAgentEdgeExec) Exec(ctx context.Context) (*OrderAgentEdge, error) {
	var v OrderAgentEdge
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance OrderAgentEdgeExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type OrderAgentEdgeExecArray struct {
	exec *prisma.Exec
}

func (instance OrderAgentEdgeExecArray) Exec(ctx context.Context) ([]OrderAgentEdge, error) {
	var v []OrderAgentEdge
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type OrderAgentEdge struct {
	Cursor string `json:"cursor"`
}

type OrderCandidateExec struct {
	exec *prisma.Exec
}

func (instance *OrderCandidateExec) Remark() *RemarkExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "Remark"},
		"remark",
		[]string{"id", "ptId", "startDate", "endDate", "realSalary", "isWorked"})

	return &RemarkExec{ret}
}

func (instance *OrderCandidateExec) RegistrationChannel() *RegistrationChannelExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "RegistrationChannel"},
		"registrationChannel",
		[]string{"id", "orderId", "type", "inviterId"})

	return &RegistrationChannelExec{ret}
}

func (instance *OrderCandidateExec) OrderOrigin() *OrderOriginExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "OrderOrigin"},
		"orderOrigin",
		[]string{"id", "hotelId", "hrId", "adviserId", "datetime", "duration", "job", "mode", "count", "countMale", "status"})

	return &OrderOriginExec{ret}
}

func (instance OrderCandidateExec) Exec(ctx context.Context) (*OrderCandidate, error) {
	var v OrderCandidate
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance OrderCandidateExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type OrderCandidateExecArray struct {
	exec *prisma.Exec
}

func (instance OrderCandidateExecArray) Exec(ctx context.Context) ([]OrderCandidate, error) {
	var v []OrderCandidate
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type OrderCandidate struct {
	ID            string `json:"id"`
	AdviserId     string `json:"adviserId"`
	AgentId       string `json:"agentId"`
	PtId          string `json:"ptId"`
	ApplyTime     *int32 `json:"applyTime,omitempty"`
	SignInTime    *int32 `json:"signInTime,omitempty"`
	PtStatus      int32  `json:"ptStatus"`
	PtPerformance *int32 `json:"ptPerformance,omitempty"`
	ObjectReason  *int32 `json:"objectReason,omitempty"`
}

type OrderAgentConnectionExec struct {
	exec *prisma.Exec
}

func (instance *OrderAgentConnectionExec) PageInfo() *PageInfoExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "PageInfo"},
		"pageInfo",
		[]string{"hasNextPage", "hasPreviousPage", "startCursor", "endCursor"})

	return &PageInfoExec{ret}
}

func (instance *OrderAgentConnectionExec) Edges() *OrderAgentEdgeExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "OrderAgentEdge"},
		"edges",
		[]string{"cursor"})

	return &OrderAgentEdgeExec{ret}
}

func (instance *OrderAgentConnectionExec) Aggregate(ctx context.Context) (Aggregate, error) {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "AggregateOrderAgent"},
		"aggregate",
		[]string{"count"})

	var v Aggregate
	_, err := ret.Exec(ctx, &v)
	return v, err
}

func (instance OrderAgentConnectionExec) Exec(ctx context.Context) (*OrderAgentConnection, error) {
	var v OrderAgentConnection
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance OrderAgentConnectionExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type OrderAgentConnectionExecArray struct {
	exec *prisma.Exec
}

func (instance OrderAgentConnectionExecArray) Exec(ctx context.Context) ([]OrderAgentConnection, error) {
	var v []OrderAgentConnection
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type OrderAgentConnection struct {
}

type RemarkExec struct {
	exec *prisma.Exec
}

func (instance *RemarkExec) OrderCandidate() *OrderCandidateExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "OrderCandidate"},
		"orderCandidate",
		[]string{"id", "adviserId", "agentId", "ptId", "applyTime", "signInTime", "ptStatus", "ptPerformance", "objectReason"})

	return &OrderCandidateExec{ret}
}

func (instance RemarkExec) Exec(ctx context.Context) (*Remark, error) {
	var v Remark
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance RemarkExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type RemarkExecArray struct {
	exec *prisma.Exec
}

func (instance RemarkExecArray) Exec(ctx context.Context) ([]Remark, error) {
	var v []Remark
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type Remark struct {
	ID         string `json:"id"`
	PtId       string `json:"ptId"`
	StartDate  *int32 `json:"startDate,omitempty"`
	EndDate    *int32 `json:"endDate,omitempty"`
	RealSalary *int32 `json:"realSalary,omitempty"`
	IsWorked   int32  `json:"isWorked"`
}

type RegistrationChannelSubscriptionPayloadExec struct {
	exec *prisma.Exec
}

func (instance *RegistrationChannelSubscriptionPayloadExec) Node() *RegistrationChannelExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "RegistrationChannel"},
		"node",
		[]string{"id", "orderId", "type", "inviterId"})

	return &RegistrationChannelExec{ret}
}

func (instance *RegistrationChannelSubscriptionPayloadExec) PreviousValues() *RegistrationChannelPreviousValuesExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "RegistrationChannelPreviousValues"},
		"previousValues",
		[]string{"id", "orderId", "type", "inviterId"})

	return &RegistrationChannelPreviousValuesExec{ret}
}

func (instance RegistrationChannelSubscriptionPayloadExec) Exec(ctx context.Context) (*RegistrationChannelSubscriptionPayload, error) {
	var v RegistrationChannelSubscriptionPayload
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance RegistrationChannelSubscriptionPayloadExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type RegistrationChannelSubscriptionPayloadExecArray struct {
	exec *prisma.Exec
}

func (instance RegistrationChannelSubscriptionPayloadExecArray) Exec(ctx context.Context) ([]RegistrationChannelSubscriptionPayload, error) {
	var v []RegistrationChannelSubscriptionPayload
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type RegistrationChannelSubscriptionPayload struct {
	Mutation      MutationType `json:"mutation"`
	UpdatedFields []string     `json:"updatedFields,omitempty"`
}

type OrderHotelModifyExec struct {
	exec *prisma.Exec
}

func (instance *OrderHotelModifyExec) OrderOrigin() *OrderOriginExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "OrderOrigin"},
		"orderOrigin",
		[]string{"id", "hotelId", "hrId", "adviserId", "datetime", "duration", "job", "mode", "count", "countMale", "status"})

	return &OrderOriginExec{ret}
}

func (instance OrderHotelModifyExec) Exec(ctx context.Context) (*OrderHotelModify, error) {
	var v OrderHotelModify
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance OrderHotelModifyExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type OrderHotelModifyExecArray struct {
	exec *prisma.Exec
}

func (instance OrderHotelModifyExecArray) Exec(ctx context.Context) ([]OrderHotelModify, error) {
	var v []OrderHotelModify
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type OrderHotelModify struct {
	ID        string `json:"id"`
	Revision  int32  `json:"revision"`
	Timestamp int32  `json:"timestamp"`
	Count     *int32 `json:"count,omitempty"`
	CountMale *int32 `json:"countMale,omitempty"`
	DateTime  *int32 `json:"dateTime,omitempty"`
	Duration  *int32 `json:"duration,omitempty"`
	Mode      *int32 `json:"mode,omitempty"`
}

type OrderAgentExec struct {
	exec *prisma.Exec
}

func (instance OrderAgentExec) Exec(ctx context.Context) (*OrderAgent, error) {
	var v OrderAgent
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance OrderAgentExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type OrderAgentExecArray struct {
	exec *prisma.Exec
}

func (instance OrderAgentExecArray) Exec(ctx context.Context) ([]OrderAgent, error) {
	var v []OrderAgent
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type OrderAgent struct {
	ID      string `json:"id"`
	OrderId string `json:"orderId"`
	AgentId string `json:"agentId"`
}

type RemarkConnectionExec struct {
	exec *prisma.Exec
}

func (instance *RemarkConnectionExec) PageInfo() *PageInfoExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "PageInfo"},
		"pageInfo",
		[]string{"hasNextPage", "hasPreviousPage", "startCursor", "endCursor"})

	return &PageInfoExec{ret}
}

func (instance *RemarkConnectionExec) Edges() *RemarkEdgeExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "RemarkEdge"},
		"edges",
		[]string{"cursor"})

	return &RemarkEdgeExec{ret}
}

func (instance *RemarkConnectionExec) Aggregate(ctx context.Context) (Aggregate, error) {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "AggregateRemark"},
		"aggregate",
		[]string{"count"})

	var v Aggregate
	_, err := ret.Exec(ctx, &v)
	return v, err
}

func (instance RemarkConnectionExec) Exec(ctx context.Context) (*RemarkConnection, error) {
	var v RemarkConnection
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance RemarkConnectionExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type RemarkConnectionExecArray struct {
	exec *prisma.Exec
}

func (instance RemarkConnectionExecArray) Exec(ctx context.Context) ([]RemarkConnection, error) {
	var v []RemarkConnection
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type RemarkConnection struct {
}

type OrderAdviserModifyExec struct {
	exec *prisma.Exec
}

func (instance *OrderAdviserModifyExec) OrderOrigin() *OrderOriginExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "OrderOrigin"},
		"orderOrigin",
		[]string{"id", "hotelId", "hrId", "adviserId", "datetime", "duration", "job", "mode", "count", "countMale", "status"})

	return &OrderOriginExec{ret}
}

func (instance OrderAdviserModifyExec) Exec(ctx context.Context) (*OrderAdviserModify, error) {
	var v OrderAdviserModify
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance OrderAdviserModifyExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type OrderAdviserModifyExecArray struct {
	exec *prisma.Exec
}

func (instance OrderAdviserModifyExecArray) Exec(ctx context.Context) ([]OrderAdviserModify, error) {
	var v []OrderAdviserModify
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type OrderAdviserModify struct {
	ID           string  `json:"id"`
	Revision     int32   `json:"revision"`
	TimeStamp    int32   `json:"timeStamp"`
	IsFloat      *int32  `json:"isFloat,omitempty"`
	HourlySalary *int32  `json:"hourlySalary,omitempty"`
	WorkCount    *string `json:"workCount,omitempty"`
	Attention    *string `json:"attention,omitempty"`
}

type OrderAdviserModifySubscriptionPayloadExec struct {
	exec *prisma.Exec
}

func (instance *OrderAdviserModifySubscriptionPayloadExec) Node() *OrderAdviserModifyExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "OrderAdviserModify"},
		"node",
		[]string{"id", "revision", "timeStamp", "isFloat", "hourlySalary", "workCount", "attention"})

	return &OrderAdviserModifyExec{ret}
}

func (instance *OrderAdviserModifySubscriptionPayloadExec) PreviousValues() *OrderAdviserModifyPreviousValuesExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "OrderAdviserModifyPreviousValues"},
		"previousValues",
		[]string{"id", "revision", "timeStamp", "isFloat", "hourlySalary", "workCount", "attention"})

	return &OrderAdviserModifyPreviousValuesExec{ret}
}

func (instance OrderAdviserModifySubscriptionPayloadExec) Exec(ctx context.Context) (*OrderAdviserModifySubscriptionPayload, error) {
	var v OrderAdviserModifySubscriptionPayload
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance OrderAdviserModifySubscriptionPayloadExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type OrderAdviserModifySubscriptionPayloadExecArray struct {
	exec *prisma.Exec
}

func (instance OrderAdviserModifySubscriptionPayloadExecArray) Exec(ctx context.Context) ([]OrderAdviserModifySubscriptionPayload, error) {
	var v []OrderAdviserModifySubscriptionPayload
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type OrderAdviserModifySubscriptionPayload struct {
	Mutation      MutationType `json:"mutation"`
	UpdatedFields []string     `json:"updatedFields,omitempty"`
}

type RegistrationChannelConnectionExec struct {
	exec *prisma.Exec
}

func (instance *RegistrationChannelConnectionExec) PageInfo() *PageInfoExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "PageInfo"},
		"pageInfo",
		[]string{"hasNextPage", "hasPreviousPage", "startCursor", "endCursor"})

	return &PageInfoExec{ret}
}

func (instance *RegistrationChannelConnectionExec) Edges() *RegistrationChannelEdgeExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "RegistrationChannelEdge"},
		"edges",
		[]string{"cursor"})

	return &RegistrationChannelEdgeExec{ret}
}

func (instance *RegistrationChannelConnectionExec) Aggregate(ctx context.Context) (Aggregate, error) {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "AggregateRegistrationChannel"},
		"aggregate",
		[]string{"count"})

	var v Aggregate
	_, err := ret.Exec(ctx, &v)
	return v, err
}

func (instance RegistrationChannelConnectionExec) Exec(ctx context.Context) (*RegistrationChannelConnection, error) {
	var v RegistrationChannelConnection
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance RegistrationChannelConnectionExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type RegistrationChannelConnectionExecArray struct {
	exec *prisma.Exec
}

func (instance RegistrationChannelConnectionExecArray) Exec(ctx context.Context) ([]RegistrationChannelConnection, error) {
	var v []RegistrationChannelConnection
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type RegistrationChannelConnection struct {
}

type OrderAdviserModifyPreviousValuesExec struct {
	exec *prisma.Exec
}

func (instance OrderAdviserModifyPreviousValuesExec) Exec(ctx context.Context) (*OrderAdviserModifyPreviousValues, error) {
	var v OrderAdviserModifyPreviousValues
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance OrderAdviserModifyPreviousValuesExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type OrderAdviserModifyPreviousValuesExecArray struct {
	exec *prisma.Exec
}

func (instance OrderAdviserModifyPreviousValuesExecArray) Exec(ctx context.Context) ([]OrderAdviserModifyPreviousValues, error) {
	var v []OrderAdviserModifyPreviousValues
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type OrderAdviserModifyPreviousValues struct {
	ID           string  `json:"id"`
	Revision     int32   `json:"revision"`
	TimeStamp    int32   `json:"timeStamp"`
	IsFloat      *int32  `json:"isFloat,omitempty"`
	HourlySalary *int32  `json:"hourlySalary,omitempty"`
	WorkCount    *string `json:"workCount,omitempty"`
	Attention    *string `json:"attention,omitempty"`
}

type OrderOriginConnectionExec struct {
	exec *prisma.Exec
}

func (instance *OrderOriginConnectionExec) PageInfo() *PageInfoExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "PageInfo"},
		"pageInfo",
		[]string{"hasNextPage", "hasPreviousPage", "startCursor", "endCursor"})

	return &PageInfoExec{ret}
}

func (instance *OrderOriginConnectionExec) Edges() *OrderOriginEdgeExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "OrderOriginEdge"},
		"edges",
		[]string{"cursor"})

	return &OrderOriginEdgeExec{ret}
}

func (instance *OrderOriginConnectionExec) Aggregate(ctx context.Context) (Aggregate, error) {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "AggregateOrderOrigin"},
		"aggregate",
		[]string{"count"})

	var v Aggregate
	_, err := ret.Exec(ctx, &v)
	return v, err
}

func (instance OrderOriginConnectionExec) Exec(ctx context.Context) (*OrderOriginConnection, error) {
	var v OrderOriginConnection
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance OrderOriginConnectionExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type OrderOriginConnectionExecArray struct {
	exec *prisma.Exec
}

func (instance OrderOriginConnectionExecArray) Exec(ctx context.Context) ([]OrderOriginConnection, error) {
	var v []OrderOriginConnection
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type OrderOriginConnection struct {
}

type OrderAgentSubscriptionPayloadExec struct {
	exec *prisma.Exec
}

func (instance *OrderAgentSubscriptionPayloadExec) Node() *OrderAgentExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "OrderAgent"},
		"node",
		[]string{"id", "orderId", "agentId"})

	return &OrderAgentExec{ret}
}

func (instance *OrderAgentSubscriptionPayloadExec) PreviousValues() *OrderAgentPreviousValuesExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "OrderAgentPreviousValues"},
		"previousValues",
		[]string{"id", "orderId", "agentId"})

	return &OrderAgentPreviousValuesExec{ret}
}

func (instance OrderAgentSubscriptionPayloadExec) Exec(ctx context.Context) (*OrderAgentSubscriptionPayload, error) {
	var v OrderAgentSubscriptionPayload
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance OrderAgentSubscriptionPayloadExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type OrderAgentSubscriptionPayloadExecArray struct {
	exec *prisma.Exec
}

func (instance OrderAgentSubscriptionPayloadExecArray) Exec(ctx context.Context) ([]OrderAgentSubscriptionPayload, error) {
	var v []OrderAgentSubscriptionPayload
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type OrderAgentSubscriptionPayload struct {
	Mutation      MutationType `json:"mutation"`
	UpdatedFields []string     `json:"updatedFields,omitempty"`
}

type OrderAgentPreviousValuesExec struct {
	exec *prisma.Exec
}

func (instance OrderAgentPreviousValuesExec) Exec(ctx context.Context) (*OrderAgentPreviousValues, error) {
	var v OrderAgentPreviousValues
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance OrderAgentPreviousValuesExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type OrderAgentPreviousValuesExecArray struct {
	exec *prisma.Exec
}

func (instance OrderAgentPreviousValuesExecArray) Exec(ctx context.Context) ([]OrderAgentPreviousValues, error) {
	var v []OrderAgentPreviousValues
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type OrderAgentPreviousValues struct {
	ID      string `json:"id"`
	OrderId string `json:"orderId"`
	AgentId string `json:"agentId"`
}

type OrderHotelModifyConnectionExec struct {
	exec *prisma.Exec
}

func (instance *OrderHotelModifyConnectionExec) PageInfo() *PageInfoExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "PageInfo"},
		"pageInfo",
		[]string{"hasNextPage", "hasPreviousPage", "startCursor", "endCursor"})

	return &PageInfoExec{ret}
}

func (instance *OrderHotelModifyConnectionExec) Edges() *OrderHotelModifyEdgeExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "OrderHotelModifyEdge"},
		"edges",
		[]string{"cursor"})

	return &OrderHotelModifyEdgeExec{ret}
}

func (instance *OrderHotelModifyConnectionExec) Aggregate(ctx context.Context) (Aggregate, error) {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "AggregateOrderHotelModify"},
		"aggregate",
		[]string{"count"})

	var v Aggregate
	_, err := ret.Exec(ctx, &v)
	return v, err
}

func (instance OrderHotelModifyConnectionExec) Exec(ctx context.Context) (*OrderHotelModifyConnection, error) {
	var v OrderHotelModifyConnection
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance OrderHotelModifyConnectionExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type OrderHotelModifyConnectionExecArray struct {
	exec *prisma.Exec
}

func (instance OrderHotelModifyConnectionExecArray) Exec(ctx context.Context) ([]OrderHotelModifyConnection, error) {
	var v []OrderHotelModifyConnection
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type OrderHotelModifyConnection struct {
}

type OrderAdviserModifyEdgeExec struct {
	exec *prisma.Exec
}

func (instance *OrderAdviserModifyEdgeExec) Node() *OrderAdviserModifyExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "OrderAdviserModify"},
		"node",
		[]string{"id", "revision", "timeStamp", "isFloat", "hourlySalary", "workCount", "attention"})

	return &OrderAdviserModifyExec{ret}
}

func (instance OrderAdviserModifyEdgeExec) Exec(ctx context.Context) (*OrderAdviserModifyEdge, error) {
	var v OrderAdviserModifyEdge
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance OrderAdviserModifyEdgeExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type OrderAdviserModifyEdgeExecArray struct {
	exec *prisma.Exec
}

func (instance OrderAdviserModifyEdgeExecArray) Exec(ctx context.Context) ([]OrderAdviserModifyEdge, error) {
	var v []OrderAdviserModifyEdge
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type OrderAdviserModifyEdge struct {
	Cursor string `json:"cursor"`
}

type OrderCandidateEdgeExec struct {
	exec *prisma.Exec
}

func (instance *OrderCandidateEdgeExec) Node() *OrderCandidateExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "OrderCandidate"},
		"node",
		[]string{"id", "adviserId", "agentId", "ptId", "applyTime", "signInTime", "ptStatus", "ptPerformance", "objectReason"})

	return &OrderCandidateExec{ret}
}

func (instance OrderCandidateEdgeExec) Exec(ctx context.Context) (*OrderCandidateEdge, error) {
	var v OrderCandidateEdge
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance OrderCandidateEdgeExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type OrderCandidateEdgeExecArray struct {
	exec *prisma.Exec
}

func (instance OrderCandidateEdgeExecArray) Exec(ctx context.Context) ([]OrderCandidateEdge, error) {
	var v []OrderCandidateEdge
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type OrderCandidateEdge struct {
	Cursor string `json:"cursor"`
}

type OrderCandidateSubscriptionPayloadExec struct {
	exec *prisma.Exec
}

func (instance *OrderCandidateSubscriptionPayloadExec) Node() *OrderCandidateExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "OrderCandidate"},
		"node",
		[]string{"id", "adviserId", "agentId", "ptId", "applyTime", "signInTime", "ptStatus", "ptPerformance", "objectReason"})

	return &OrderCandidateExec{ret}
}

func (instance *OrderCandidateSubscriptionPayloadExec) PreviousValues() *OrderCandidatePreviousValuesExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "OrderCandidatePreviousValues"},
		"previousValues",
		[]string{"id", "adviserId", "agentId", "ptId", "applyTime", "signInTime", "ptStatus", "ptPerformance", "objectReason"})

	return &OrderCandidatePreviousValuesExec{ret}
}

func (instance OrderCandidateSubscriptionPayloadExec) Exec(ctx context.Context) (*OrderCandidateSubscriptionPayload, error) {
	var v OrderCandidateSubscriptionPayload
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance OrderCandidateSubscriptionPayloadExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type OrderCandidateSubscriptionPayloadExecArray struct {
	exec *prisma.Exec
}

func (instance OrderCandidateSubscriptionPayloadExecArray) Exec(ctx context.Context) ([]OrderCandidateSubscriptionPayload, error) {
	var v []OrderCandidateSubscriptionPayload
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type OrderCandidateSubscriptionPayload struct {
	Mutation      MutationType `json:"mutation"`
	UpdatedFields []string     `json:"updatedFields,omitempty"`
}

type OrderCandidatePreviousValuesExec struct {
	exec *prisma.Exec
}

func (instance OrderCandidatePreviousValuesExec) Exec(ctx context.Context) (*OrderCandidatePreviousValues, error) {
	var v OrderCandidatePreviousValues
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance OrderCandidatePreviousValuesExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type OrderCandidatePreviousValuesExecArray struct {
	exec *prisma.Exec
}

func (instance OrderCandidatePreviousValuesExecArray) Exec(ctx context.Context) ([]OrderCandidatePreviousValues, error) {
	var v []OrderCandidatePreviousValues
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type OrderCandidatePreviousValues struct {
	ID            string `json:"id"`
	AdviserId     string `json:"adviserId"`
	AgentId       string `json:"agentId"`
	PtId          string `json:"ptId"`
	ApplyTime     *int32 `json:"applyTime,omitempty"`
	SignInTime    *int32 `json:"signInTime,omitempty"`
	PtStatus      int32  `json:"ptStatus"`
	PtPerformance *int32 `json:"ptPerformance,omitempty"`
	ObjectReason  *int32 `json:"objectReason,omitempty"`
}

type RemarkSubscriptionPayloadExec struct {
	exec *prisma.Exec
}

func (instance *RemarkSubscriptionPayloadExec) Node() *RemarkExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "Remark"},
		"node",
		[]string{"id", "ptId", "startDate", "endDate", "realSalary", "isWorked"})

	return &RemarkExec{ret}
}

func (instance *RemarkSubscriptionPayloadExec) PreviousValues() *RemarkPreviousValuesExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "RemarkPreviousValues"},
		"previousValues",
		[]string{"id", "ptId", "startDate", "endDate", "realSalary", "isWorked"})

	return &RemarkPreviousValuesExec{ret}
}

func (instance RemarkSubscriptionPayloadExec) Exec(ctx context.Context) (*RemarkSubscriptionPayload, error) {
	var v RemarkSubscriptionPayload
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance RemarkSubscriptionPayloadExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type RemarkSubscriptionPayloadExecArray struct {
	exec *prisma.Exec
}

func (instance RemarkSubscriptionPayloadExecArray) Exec(ctx context.Context) ([]RemarkSubscriptionPayload, error) {
	var v []RemarkSubscriptionPayload
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type RemarkSubscriptionPayload struct {
	Mutation      MutationType `json:"mutation"`
	UpdatedFields []string     `json:"updatedFields,omitempty"`
}

type RegistrationChannelPreviousValuesExec struct {
	exec *prisma.Exec
}

func (instance RegistrationChannelPreviousValuesExec) Exec(ctx context.Context) (*RegistrationChannelPreviousValues, error) {
	var v RegistrationChannelPreviousValues
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance RegistrationChannelPreviousValuesExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type RegistrationChannelPreviousValuesExecArray struct {
	exec *prisma.Exec
}

func (instance RegistrationChannelPreviousValuesExecArray) Exec(ctx context.Context) ([]RegistrationChannelPreviousValues, error) {
	var v []RegistrationChannelPreviousValues
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type RegistrationChannelPreviousValues struct {
	ID        string  `json:"id"`
	OrderId   string  `json:"orderId"`
	Type      int32   `json:"type"`
	InviterId *string `json:"inviterId,omitempty"`
}

type RegistrationChannelExec struct {
	exec *prisma.Exec
}

func (instance *RegistrationChannelExec) OrderCandidate() *OrderCandidateExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "OrderCandidate"},
		"orderCandidate",
		[]string{"id", "adviserId", "agentId", "ptId", "applyTime", "signInTime", "ptStatus", "ptPerformance", "objectReason"})

	return &OrderCandidateExec{ret}
}

func (instance RegistrationChannelExec) Exec(ctx context.Context) (*RegistrationChannel, error) {
	var v RegistrationChannel
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance RegistrationChannelExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type RegistrationChannelExecArray struct {
	exec *prisma.Exec
}

func (instance RegistrationChannelExecArray) Exec(ctx context.Context) ([]RegistrationChannel, error) {
	var v []RegistrationChannel
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type RegistrationChannel struct {
	ID        string  `json:"id"`
	OrderId   string  `json:"orderId"`
	Type      int32   `json:"type"`
	InviterId *string `json:"inviterId,omitempty"`
}

type OrderHotelModifySubscriptionPayloadExec struct {
	exec *prisma.Exec
}

func (instance *OrderHotelModifySubscriptionPayloadExec) Node() *OrderHotelModifyExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "OrderHotelModify"},
		"node",
		[]string{"id", "revision", "timestamp", "count", "countMale", "dateTime", "duration", "mode"})

	return &OrderHotelModifyExec{ret}
}

func (instance *OrderHotelModifySubscriptionPayloadExec) PreviousValues() *OrderHotelModifyPreviousValuesExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "OrderHotelModifyPreviousValues"},
		"previousValues",
		[]string{"id", "revision", "timestamp", "count", "countMale", "dateTime", "duration", "mode"})

	return &OrderHotelModifyPreviousValuesExec{ret}
}

func (instance OrderHotelModifySubscriptionPayloadExec) Exec(ctx context.Context) (*OrderHotelModifySubscriptionPayload, error) {
	var v OrderHotelModifySubscriptionPayload
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance OrderHotelModifySubscriptionPayloadExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type OrderHotelModifySubscriptionPayloadExecArray struct {
	exec *prisma.Exec
}

func (instance OrderHotelModifySubscriptionPayloadExecArray) Exec(ctx context.Context) ([]OrderHotelModifySubscriptionPayload, error) {
	var v []OrderHotelModifySubscriptionPayload
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type OrderHotelModifySubscriptionPayload struct {
	Mutation      MutationType `json:"mutation"`
	UpdatedFields []string     `json:"updatedFields,omitempty"`
}

type OrderOriginExec struct {
	exec *prisma.Exec
}

type OrderHotelModifiesParamsExec struct {
	Where   *OrderHotelModifyWhereInput
	OrderBy *OrderHotelModifyOrderByInput
	Skip    *int32
	After   *string
	Before  *string
	First   *int32
	Last    *int32
}

func (instance *OrderOriginExec) OrderHotelModifies(params *OrderHotelModifiesParamsExec) *OrderHotelModifyExecArray {
	var wparams *prisma.WhereParams
	if params != nil {
		wparams = &prisma.WhereParams{
			Where:   params.Where,
			OrderBy: (*string)(params.OrderBy),
			Skip:    params.Skip,
			After:   params.After,
			Before:  params.Before,
			First:   params.First,
			Last:    params.Last,
		}
	}

	ret := instance.exec.Client.GetMany(
		instance.exec,
		wparams,
		[3]string{"OrderHotelModifyWhereInput", "OrderHotelModifyOrderByInput", "OrderHotelModify"},
		"orderHotelModifies",
		[]string{"id", "revision", "timestamp", "count", "countMale", "dateTime", "duration", "mode"})

	return &OrderHotelModifyExecArray{ret}
}

type OrderAdviserModifiesParamsExec struct {
	Where   *OrderAdviserModifyWhereInput
	OrderBy *OrderAdviserModifyOrderByInput
	Skip    *int32
	After   *string
	Before  *string
	First   *int32
	Last    *int32
}

func (instance *OrderOriginExec) OrderAdviserModifies(params *OrderAdviserModifiesParamsExec) *OrderAdviserModifyExecArray {
	var wparams *prisma.WhereParams
	if params != nil {
		wparams = &prisma.WhereParams{
			Where:   params.Where,
			OrderBy: (*string)(params.OrderBy),
			Skip:    params.Skip,
			After:   params.After,
			Before:  params.Before,
			First:   params.First,
			Last:    params.Last,
		}
	}

	ret := instance.exec.Client.GetMany(
		instance.exec,
		wparams,
		[3]string{"OrderAdviserModifyWhereInput", "OrderAdviserModifyOrderByInput", "OrderAdviserModify"},
		"orderAdviserModifies",
		[]string{"id", "revision", "timeStamp", "isFloat", "hourlySalary", "workCount", "attention"})

	return &OrderAdviserModifyExecArray{ret}
}

type OrderCandidatesParamsExec struct {
	Where   *OrderCandidateWhereInput
	OrderBy *OrderCandidateOrderByInput
	Skip    *int32
	After   *string
	Before  *string
	First   *int32
	Last    *int32
}

func (instance *OrderOriginExec) OrderCandidates(params *OrderCandidatesParamsExec) *OrderCandidateExecArray {
	var wparams *prisma.WhereParams
	if params != nil {
		wparams = &prisma.WhereParams{
			Where:   params.Where,
			OrderBy: (*string)(params.OrderBy),
			Skip:    params.Skip,
			After:   params.After,
			Before:  params.Before,
			First:   params.First,
			Last:    params.Last,
		}
	}

	ret := instance.exec.Client.GetMany(
		instance.exec,
		wparams,
		[3]string{"OrderCandidateWhereInput", "OrderCandidateOrderByInput", "OrderCandidate"},
		"orderCandidates",
		[]string{"id", "adviserId", "agentId", "ptId", "applyTime", "signInTime", "ptStatus", "ptPerformance", "objectReason"})

	return &OrderCandidateExecArray{ret}
}

func (instance OrderOriginExec) Exec(ctx context.Context) (*OrderOrigin, error) {
	var v OrderOrigin
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance OrderOriginExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type OrderOriginExecArray struct {
	exec *prisma.Exec
}

func (instance OrderOriginExecArray) Exec(ctx context.Context) ([]OrderOrigin, error) {
	var v []OrderOrigin
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type OrderOrigin struct {
	ID        string `json:"id"`
	HotelId   string `json:"hotelId"`
	HrId      string `json:"hrId"`
	AdviserId string `json:"adviserId"`
	Datetime  int32  `json:"datetime"`
	Duration  int32  `json:"duration"`
	Job       string `json:"job"`
	Mode      int32  `json:"mode"`
	Count     int32  `json:"count"`
	CountMale int32  `json:"countMale"`
	Status    int32  `json:"status"`
}

type OrderHotelModifyPreviousValuesExec struct {
	exec *prisma.Exec
}

func (instance OrderHotelModifyPreviousValuesExec) Exec(ctx context.Context) (*OrderHotelModifyPreviousValues, error) {
	var v OrderHotelModifyPreviousValues
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance OrderHotelModifyPreviousValuesExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type OrderHotelModifyPreviousValuesExecArray struct {
	exec *prisma.Exec
}

func (instance OrderHotelModifyPreviousValuesExecArray) Exec(ctx context.Context) ([]OrderHotelModifyPreviousValues, error) {
	var v []OrderHotelModifyPreviousValues
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type OrderHotelModifyPreviousValues struct {
	ID        string `json:"id"`
	Revision  int32  `json:"revision"`
	Timestamp int32  `json:"timestamp"`
	Count     *int32 `json:"count,omitempty"`
	CountMale *int32 `json:"countMale,omitempty"`
	DateTime  *int32 `json:"dateTime,omitempty"`
	Duration  *int32 `json:"duration,omitempty"`
	Mode      *int32 `json:"mode,omitempty"`
}

type RemarkEdgeExec struct {
	exec *prisma.Exec
}

func (instance *RemarkEdgeExec) Node() *RemarkExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "Remark"},
		"node",
		[]string{"id", "ptId", "startDate", "endDate", "realSalary", "isWorked"})

	return &RemarkExec{ret}
}

func (instance RemarkEdgeExec) Exec(ctx context.Context) (*RemarkEdge, error) {
	var v RemarkEdge
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance RemarkEdgeExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type RemarkEdgeExecArray struct {
	exec *prisma.Exec
}

func (instance RemarkEdgeExecArray) Exec(ctx context.Context) ([]RemarkEdge, error) {
	var v []RemarkEdge
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type RemarkEdge struct {
	Cursor string `json:"cursor"`
}

type OrderAdviserModifyConnectionExec struct {
	exec *prisma.Exec
}

func (instance *OrderAdviserModifyConnectionExec) PageInfo() *PageInfoExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "PageInfo"},
		"pageInfo",
		[]string{"hasNextPage", "hasPreviousPage", "startCursor", "endCursor"})

	return &PageInfoExec{ret}
}

func (instance *OrderAdviserModifyConnectionExec) Edges() *OrderAdviserModifyEdgeExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "OrderAdviserModifyEdge"},
		"edges",
		[]string{"cursor"})

	return &OrderAdviserModifyEdgeExec{ret}
}

func (instance *OrderAdviserModifyConnectionExec) Aggregate(ctx context.Context) (Aggregate, error) {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "AggregateOrderAdviserModify"},
		"aggregate",
		[]string{"count"})

	var v Aggregate
	_, err := ret.Exec(ctx, &v)
	return v, err
}

func (instance OrderAdviserModifyConnectionExec) Exec(ctx context.Context) (*OrderAdviserModifyConnection, error) {
	var v OrderAdviserModifyConnection
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance OrderAdviserModifyConnectionExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type OrderAdviserModifyConnectionExecArray struct {
	exec *prisma.Exec
}

func (instance OrderAdviserModifyConnectionExecArray) Exec(ctx context.Context) ([]OrderAdviserModifyConnection, error) {
	var v []OrderAdviserModifyConnection
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type OrderAdviserModifyConnection struct {
}

type OrderOriginPreviousValuesExec struct {
	exec *prisma.Exec
}

func (instance OrderOriginPreviousValuesExec) Exec(ctx context.Context) (*OrderOriginPreviousValues, error) {
	var v OrderOriginPreviousValues
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance OrderOriginPreviousValuesExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type OrderOriginPreviousValuesExecArray struct {
	exec *prisma.Exec
}

func (instance OrderOriginPreviousValuesExecArray) Exec(ctx context.Context) ([]OrderOriginPreviousValues, error) {
	var v []OrderOriginPreviousValues
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type OrderOriginPreviousValues struct {
	ID        string `json:"id"`
	HotelId   string `json:"hotelId"`
	HrId      string `json:"hrId"`
	AdviserId string `json:"adviserId"`
	Datetime  int32  `json:"datetime"`
	Duration  int32  `json:"duration"`
	Job       string `json:"job"`
	Mode      int32  `json:"mode"`
	Count     int32  `json:"count"`
	CountMale int32  `json:"countMale"`
	Status    int32  `json:"status"`
}

type OrderOriginSubscriptionPayloadExec struct {
	exec *prisma.Exec
}

func (instance *OrderOriginSubscriptionPayloadExec) Node() *OrderOriginExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "OrderOrigin"},
		"node",
		[]string{"id", "hotelId", "hrId", "adviserId", "datetime", "duration", "job", "mode", "count", "countMale", "status"})

	return &OrderOriginExec{ret}
}

func (instance *OrderOriginSubscriptionPayloadExec) PreviousValues() *OrderOriginPreviousValuesExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "OrderOriginPreviousValues"},
		"previousValues",
		[]string{"id", "hotelId", "hrId", "adviserId", "datetime", "duration", "job", "mode", "count", "countMale", "status"})

	return &OrderOriginPreviousValuesExec{ret}
}

func (instance OrderOriginSubscriptionPayloadExec) Exec(ctx context.Context) (*OrderOriginSubscriptionPayload, error) {
	var v OrderOriginSubscriptionPayload
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance OrderOriginSubscriptionPayloadExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type OrderOriginSubscriptionPayloadExecArray struct {
	exec *prisma.Exec
}

func (instance OrderOriginSubscriptionPayloadExecArray) Exec(ctx context.Context) ([]OrderOriginSubscriptionPayload, error) {
	var v []OrderOriginSubscriptionPayload
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type OrderOriginSubscriptionPayload struct {
	Mutation      MutationType `json:"mutation"`
	UpdatedFields []string     `json:"updatedFields,omitempty"`
}

type PageInfoExec struct {
	exec *prisma.Exec
}

func (instance PageInfoExec) Exec(ctx context.Context) (*PageInfo, error) {
	var v PageInfo
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance PageInfoExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type PageInfoExecArray struct {
	exec *prisma.Exec
}

func (instance PageInfoExecArray) Exec(ctx context.Context) ([]PageInfo, error) {
	var v []PageInfo
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor,omitempty"`
	EndCursor       *string `json:"endCursor,omitempty"`
}

type RegistrationChannelEdgeExec struct {
	exec *prisma.Exec
}

func (instance *RegistrationChannelEdgeExec) Node() *RegistrationChannelExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "RegistrationChannel"},
		"node",
		[]string{"id", "orderId", "type", "inviterId"})

	return &RegistrationChannelExec{ret}
}

func (instance RegistrationChannelEdgeExec) Exec(ctx context.Context) (*RegistrationChannelEdge, error) {
	var v RegistrationChannelEdge
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance RegistrationChannelEdgeExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type RegistrationChannelEdgeExecArray struct {
	exec *prisma.Exec
}

func (instance RegistrationChannelEdgeExecArray) Exec(ctx context.Context) ([]RegistrationChannelEdge, error) {
	var v []RegistrationChannelEdge
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type RegistrationChannelEdge struct {
	Cursor string `json:"cursor"`
}

type OrderCandidateConnectionExec struct {
	exec *prisma.Exec
}

func (instance *OrderCandidateConnectionExec) PageInfo() *PageInfoExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "PageInfo"},
		"pageInfo",
		[]string{"hasNextPage", "hasPreviousPage", "startCursor", "endCursor"})

	return &PageInfoExec{ret}
}

func (instance *OrderCandidateConnectionExec) Edges() *OrderCandidateEdgeExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "OrderCandidateEdge"},
		"edges",
		[]string{"cursor"})

	return &OrderCandidateEdgeExec{ret}
}

func (instance *OrderCandidateConnectionExec) Aggregate(ctx context.Context) (Aggregate, error) {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "AggregateOrderCandidate"},
		"aggregate",
		[]string{"count"})

	var v Aggregate
	_, err := ret.Exec(ctx, &v)
	return v, err
}

func (instance OrderCandidateConnectionExec) Exec(ctx context.Context) (*OrderCandidateConnection, error) {
	var v OrderCandidateConnection
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance OrderCandidateConnectionExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type OrderCandidateConnectionExecArray struct {
	exec *prisma.Exec
}

func (instance OrderCandidateConnectionExecArray) Exec(ctx context.Context) ([]OrderCandidateConnection, error) {
	var v []OrderCandidateConnection
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type OrderCandidateConnection struct {
}

type OrderHotelModifyEdgeExec struct {
	exec *prisma.Exec
}

func (instance *OrderHotelModifyEdgeExec) Node() *OrderHotelModifyExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "OrderHotelModify"},
		"node",
		[]string{"id", "revision", "timestamp", "count", "countMale", "dateTime", "duration", "mode"})

	return &OrderHotelModifyExec{ret}
}

func (instance OrderHotelModifyEdgeExec) Exec(ctx context.Context) (*OrderHotelModifyEdge, error) {
	var v OrderHotelModifyEdge
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance OrderHotelModifyEdgeExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type OrderHotelModifyEdgeExecArray struct {
	exec *prisma.Exec
}

func (instance OrderHotelModifyEdgeExecArray) Exec(ctx context.Context) ([]OrderHotelModifyEdge, error) {
	var v []OrderHotelModifyEdge
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type OrderHotelModifyEdge struct {
	Cursor string `json:"cursor"`
}

type OrderOriginEdgeExec struct {
	exec *prisma.Exec
}

func (instance *OrderOriginEdgeExec) Node() *OrderOriginExec {
	ret := instance.exec.Client.GetOne(
		instance.exec,
		nil,
		[2]string{"", "OrderOrigin"},
		"node",
		[]string{"id", "hotelId", "hrId", "adviserId", "datetime", "duration", "job", "mode", "count", "countMale", "status"})

	return &OrderOriginExec{ret}
}

func (instance OrderOriginEdgeExec) Exec(ctx context.Context) (*OrderOriginEdge, error) {
	var v OrderOriginEdge
	ok, err := instance.exec.Exec(ctx, &v)
	if err != nil {
		return nil, err
	}
	if !ok {
		return nil, ErrNoResult
	}
	return &v, nil
}

func (instance OrderOriginEdgeExec) Exists(ctx context.Context) (bool, error) {
	return instance.exec.Exists(ctx)
}

type OrderOriginEdgeExecArray struct {
	exec *prisma.Exec
}

func (instance OrderOriginEdgeExecArray) Exec(ctx context.Context) ([]OrderOriginEdge, error) {
	var v []OrderOriginEdge
	err := instance.exec.ExecArray(ctx, &v)
	return v, err
}

type OrderOriginEdge struct {
	Cursor string `json:"cursor"`
}
